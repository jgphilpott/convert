// Generated by CoffeeScript 2.7.0

var ac$ac, ac$cmSq, ac$damSq, ac$dmSq, ac$footSq, ac$ha, ac$hmSq, ac$inchSq, ac$kmSq, ac$mSq, ac$mileSq, ac$mmSq, ac$nmSq, ac$umSq, ac$yardSq, atm$atm, atm$bar, atm$pas, atm$psi, atm$tor, bar$atm, bar$bar, bar$pas, bar$psi, bar$tor, bit$bit, bit$byte, bit$eb, bit$gb, bit$kb, bit$mb, bit$pb, bit$tb, bit$yb, bit$zb, byte$bit, byte$byte, byte$eb, byte$gb, byte$kb, byte$mb, byte$pb, byte$tb, byte$yb, byte$zb, c$c, c$f, c$k, century$century, century$day, century$decade, century$hour, century$micro, century$millennium, century$milli, century$minute, century$month, century$nano, century$second, century$week, century$year, cg$cg, cg$dag, cg$dg, cg$g, cg$hg, cg$kg, cg$lb, cg$mg, cg$ng, cg$oz, cg$st, cg$t, cg$ug, cm$cm, cm$dam, cm$dm, cm$foot, cm$hm, cm$inch, cm$km, cm$m, cm$mile, cm$mm, cm$nm, cm$um, cm$yard, cmCu$cmCu, cmCu$damCu, cmCu$dmCu, cmCu$footCu, cmCu$hmCu, cmCu$inchCu, cmCu$kmCu, cmCu$mCu, cmCu$mileCu, cmCu$mmCu, cmCu$nmCu, cmCu$umCu, cmCu$yardCu, cmSq$ac, cmSq$cmSq, cmSq$damSq, cmSq$dmSq, cmSq$footSq, cmSq$ha, cmSq$hmSq, cmSq$inchSq, cmSq$kmSq, cmSq$mSq, cmSq$mileSq, cmSq$mmSq, cmSq$nmSq, cmSq$umSq, cmSq$yardSq, convert, convertAngle, convertArea, convertData, convertDimension, convertEnergy, convertFrequency, convertLength, convertMass, convertPressure, convertSpeed, convertTemperature, convertTime, convertVolume, cup$cup, cup$gal, cup$l, cup$ml, cup$pt, cup$qt, cup$tbl, cup$tea, d2$d2, d2$d3, d3$d2, d3$d3, dag$cg, dag$dag, dag$dg, dag$g, dag$hg, dag$kg, dag$lb, dag$mg, dag$ng, dag$oz, dag$st, dag$t, dag$ug, dam$cm, dam$dam, dam$dm, dam$foot, dam$hm, dam$inch, dam$km, dam$m, dam$mile, dam$mm, dam$nm, dam$um, dam$yard, damCu$cmCu, damCu$damCu, damCu$dmCu, damCu$footCu, damCu$hmCu, damCu$inchCu, damCu$kmCu, damCu$mCu, damCu$mileCu, damCu$mmCu, damCu$nmCu, damCu$umCu, damCu$yardCu, damSq$ac, damSq$cmSq, damSq$damSq, damSq$dmSq, damSq$footSq, damSq$ha, damSq$hmSq, damSq$inchSq, damSq$kmSq, damSq$mSq, damSq$mileSq, damSq$mmSq, damSq$nmSq, damSq$umSq, damSq$yardSq, day$century, day$day, day$decade, day$hour, day$micro, day$millennium, day$milli, day$minute, day$month, day$nano, day$second, day$week, day$year, decade$century, decade$day, decade$decade, decade$hour, decade$micro, decade$millennium, decade$milli, decade$minute, decade$month, decade$nano, decade$second, decade$week, decade$year, deg$deg, deg$gad, deg$moa, deg$mrad, deg$rad, deg$soa, dg$cg, dg$dag, dg$dg, dg$g, dg$hg, dg$kg, dg$lb, dg$mg, dg$ng, dg$oz, dg$st, dg$t, dg$ug, dm$cm, dm$dam, dm$dm, dm$foot, dm$hm, dm$inch, dm$km, dm$m, dm$mile, dm$mm, dm$nm, dm$um, dm$yard, dmCu$cmCu, dmCu$damCu, dmCu$dmCu, dmCu$footCu, dmCu$hmCu, dmCu$inchCu, dmCu$kmCu, dmCu$mCu, dmCu$mileCu, dmCu$mmCu, dmCu$nmCu, dmCu$umCu, dmCu$yardCu, dmSq$ac, dmSq$cmSq, dmSq$damSq, dmSq$dmSq, dmSq$footSq, dmSq$ha, dmSq$hmSq, dmSq$inchSq, dmSq$kmSq, dmSq$mSq, dmSq$mileSq, dmSq$mmSq, dmSq$nmSq, dmSq$umSq, dmSq$yardSq, eb$bit, eb$byte, eb$eb, eb$gb, eb$kb, eb$mb, eb$pb, eb$tb, eb$yb, eb$zb, f$c, f$f, f$k, foot$cm, foot$dam, foot$dm, foot$foot, foot$hm, foot$inch, foot$km, foot$m, foot$mile, foot$mm, foot$nm, foot$um, foot$yard, footCu$cmCu, footCu$damCu, footCu$dmCu, footCu$footCu, footCu$hmCu, footCu$inchCu, footCu$kmCu, footCu$mCu, footCu$mileCu, footCu$mmCu, footCu$nmCu, footCu$umCu, footCu$yardCu, footSq$ac, footSq$cmSq, footSq$damSq, footSq$dmSq, footSq$footSq, footSq$ha, footSq$hmSq, footSq$inchSq, footSq$kmSq, footSq$mSq, footSq$mileSq, footSq$mmSq, footSq$nmSq, footSq$umSq, footSq$yardSq, fps$fps, fps$kn, fps$kph, fps$mph, fps$mps, g$cg, g$dag, g$dg, g$g, g$hg, g$kg, g$lb, g$mg, g$ng, g$oz, g$st, g$t, g$ug, gad$deg, gad$gad, gad$moa, gad$mrad, gad$rad, gad$soa, gal$cup, gal$gal, gal$l, gal$ml, gal$pt, gal$qt, gal$tbl, gal$tea, gb$bit, gb$byte, gb$eb, gb$gb, gb$kb, gb$mb, gb$pb, gb$tb, gb$yb, gb$zb, ghz$ghz, ghz$hz, ghz$khz, ghz$mhz, ha$ac, ha$cmSq, ha$damSq, ha$dmSq, ha$footSq, ha$ha, ha$hmSq, ha$inchSq, ha$kmSq, ha$mSq, ha$mileSq, ha$mmSq, ha$nmSq, ha$umSq, ha$yardSq, hg$cg, hg$dag, hg$dg, hg$g, hg$hg, hg$kg, hg$lb, hg$mg, hg$ng, hg$oz, hg$st, hg$t, hg$ug, hm$cm, hm$dam, hm$dm, hm$foot, hm$hm, hm$inch, hm$km, hm$m, hm$mile, hm$mm, hm$nm, hm$um, hm$yard, hmCu$cmCu, hmCu$damCu, hmCu$dmCu, hmCu$footCu, hmCu$hmCu, hmCu$inchCu, hmCu$kmCu, hmCu$mCu, hmCu$mileCu, hmCu$mmCu, hmCu$nmCu, hmCu$umCu, hmCu$yardCu, hmSq$ac, hmSq$cmSq, hmSq$damSq, hmSq$dmSq, hmSq$footSq, hmSq$ha, hmSq$hmSq, hmSq$inchSq, hmSq$kmSq, hmSq$mSq, hmSq$mileSq, hmSq$mmSq, hmSq$nmSq, hmSq$umSq, hmSq$yardSq, hour$century, hour$day, hour$decade, hour$hour, hour$micro, hour$millennium, hour$milli, hour$minute, hour$month, hour$nano, hour$second, hour$week, hour$year, hz$ghz, hz$hz, hz$khz, hz$mhz, inch$cm, inch$dam, inch$dm, inch$foot, inch$hm, inch$inch, inch$km, inch$m, inch$mile, inch$mm, inch$nm, inch$um, inch$yard, inchCu$cmCu, inchCu$damCu, inchCu$dmCu, inchCu$footCu, inchCu$hmCu, inchCu$inchCu, inchCu$kmCu, inchCu$mCu, inchCu$mileCu, inchCu$mmCu, inchCu$nmCu, inchCu$umCu, inchCu$yardCu, inchSq$ac, inchSq$cmSq, inchSq$damSq, inchSq$dmSq, inchSq$footSq, inchSq$ha, inchSq$hmSq, inchSq$inchSq, inchSq$kmSq, inchSq$mSq, inchSq$mileSq, inchSq$mmSq, inchSq$nmSq, inchSq$umSq, inchSq$yardSq, j$j, j$kj, j$kwh, j$wh, k$c, k$f, k$k, kb$bit, kb$byte, kb$eb, kb$gb, kb$kb, kb$mb, kb$pb, kb$tb, kb$yb, kb$zb, kg$cg, kg$dag, kg$dg, kg$g, kg$hg, kg$kg, kg$lb, kg$mg, kg$ng, kg$oz, kg$st, kg$t, kg$ug, khz$ghz, khz$hz, khz$khz, khz$mhz, kj$j, kj$kj, kj$kwh, kj$wh, km$cm, km$dam, km$dm, km$foot, km$hm, km$inch, km$km, km$m, km$mile, km$mm, km$nm, km$um, km$yard, kmCu$cmCu, kmCu$damCu, kmCu$dmCu, kmCu$footCu, kmCu$hmCu, kmCu$inchCu, kmCu$kmCu, kmCu$mCu, kmCu$mileCu, kmCu$mmCu, kmCu$nmCu, kmCu$umCu, kmCu$yardCu, kmSq$ac, kmSq$cmSq, kmSq$damSq, kmSq$dmSq, kmSq$footSq, kmSq$ha, kmSq$hmSq, kmSq$inchSq, kmSq$kmSq, kmSq$mSq, kmSq$mileSq, kmSq$mmSq, kmSq$nmSq, kmSq$umSq, kmSq$yardSq, kn$fps, kn$kn, kn$kph, kn$mph, kn$mps, kph$fps, kph$kn, kph$kph, kph$mph, kph$mps, kwh$j, kwh$kj, kwh$kwh, kwh$wh, l$cup, l$gal, l$l, l$ml, l$pt, l$qt, l$tbl, l$tea, lb$cg, lb$dag, lb$dg, lb$g, lb$hg, lb$kg, lb$lb, lb$mg, lb$ng, lb$oz, lb$st, lb$t, lb$ug, m$cm, m$dam, m$dm, m$foot, m$hm, m$inch, m$km, m$m, m$mile, m$mm, m$nm, m$um, m$yard, mCu$cmCu, mCu$damCu, mCu$dmCu, mCu$footCu, mCu$hmCu, mCu$inchCu, mCu$kmCu, mCu$mCu, mCu$mileCu, mCu$mmCu, mCu$nmCu, mCu$umCu, mCu$yardCu, mSq$ac, mSq$cmSq, mSq$damSq, mSq$dmSq, mSq$footSq, mSq$ha, mSq$hmSq, mSq$inchSq, mSq$kmSq, mSq$mSq, mSq$mileSq, mSq$mmSq, mSq$nmSq, mSq$umSq, mSq$yardSq, mb$bit, mb$byte, mb$eb, mb$gb, mb$kb, mb$mb, mb$pb, mb$tb, mb$yb, mb$zb, mg$cg, mg$dag, mg$dg, mg$g, mg$hg, mg$kg, mg$lb, mg$mg, mg$ng, mg$oz, mg$st, mg$t, mg$ug, mhz$ghz, mhz$hz, mhz$khz, mhz$mhz, micro$century, micro$day, micro$decade, micro$hour, micro$micro, micro$millennium, micro$milli, micro$minute, micro$month, micro$nano, micro$second, micro$week, micro$year, mile$cm, mile$dam, mile$dm, mile$foot, mile$hm, mile$inch, mile$km, mile$m, mile$mile, mile$mm, mile$nm, mile$um, mile$yard, mileCu$cmCu, mileCu$damCu, mileCu$dmCu, mileCu$footCu, mileCu$hmCu, mileCu$inchCu, mileCu$kmCu, mileCu$mCu, mileCu$mileCu, mileCu$mmCu, mileCu$nmCu, mileCu$umCu, mileCu$yardCu, mileSq$ac, mileSq$cmSq, mileSq$damSq, mileSq$dmSq, mileSq$footSq, mileSq$ha, mileSq$hmSq, mileSq$inchSq, mileSq$kmSq, mileSq$mSq, mileSq$mileSq, mileSq$mmSq, mileSq$nmSq, mileSq$umSq, mileSq$yardSq, millennium$century, millennium$day, millennium$decade, millennium$hour, millennium$micro, millennium$millennium, millennium$milli, millennium$minute, millennium$month, millennium$nano, millennium$second, millennium$week, millennium$year, milli$century, milli$day, milli$decade, milli$hour, milli$micro, milli$millennium, milli$milli, milli$minute, milli$month, milli$nano, milli$second, milli$week, milli$year, minute$century, minute$day, minute$decade, minute$hour, minute$micro, minute$millennium, minute$milli, minute$minute, minute$month, minute$nano, minute$second, minute$week, minute$year, ml$cup, ml$gal, ml$l, ml$ml, ml$pt, ml$qt, ml$tbl, ml$tea, mm$cm, mm$dam, mm$dm, mm$foot, mm$hm, mm$inch, mm$km, mm$m, mm$mile, mm$mm, mm$nm, mm$um, mm$yard, mmCu$cmCu, mmCu$damCu, mmCu$dmCu, mmCu$footCu, mmCu$hmCu, mmCu$inchCu, mmCu$kmCu, mmCu$mCu, mmCu$mileCu, mmCu$mmCu, mmCu$nmCu, mmCu$umCu, mmCu$yardCu, mmSq$ac, mmSq$cmSq, mmSq$damSq, mmSq$dmSq, mmSq$footSq, mmSq$ha, mmSq$hmSq, mmSq$inchSq, mmSq$kmSq, mmSq$mSq, mmSq$mileSq, mmSq$mmSq, mmSq$nmSq, mmSq$umSq, mmSq$yardSq, moa$deg, moa$gad, moa$moa, moa$mrad, moa$rad, moa$soa, month$century, month$day, month$decade, month$hour, month$micro, month$millennium, month$milli, month$minute, month$month, month$nano, month$second, month$week, month$year, mph$fps, mph$kn, mph$kph, mph$mph, mph$mps, mps$fps, mps$kn, mps$kph, mps$mph, mps$mps, mrad$deg, mrad$gad, mrad$moa, mrad$mrad, mrad$rad, mrad$soa, nano$century, nano$day, nano$decade, nano$hour, nano$micro, nano$millennium, nano$milli, nano$minute, nano$month, nano$nano, nano$second, nano$week, nano$year, ng$cg, ng$dag, ng$dg, ng$g, ng$hg, ng$kg, ng$lb, ng$mg, ng$ng, ng$oz, ng$st, ng$t, ng$ug, nm$cm, nm$dam, nm$dm, nm$foot, nm$hm, nm$inch, nm$km, nm$m, nm$mile, nm$mm, nm$nm, nm$um, nm$yard, nmCu$cmCu, nmCu$damCu, nmCu$dmCu, nmCu$footCu, nmCu$hmCu, nmCu$inchCu, nmCu$kmCu, nmCu$mCu, nmCu$mileCu, nmCu$mmCu, nmCu$nmCu, nmCu$umCu, nmCu$yardCu, nmSq$ac, nmSq$cmSq, nmSq$damSq, nmSq$dmSq, nmSq$footSq, nmSq$ha, nmSq$hmSq, nmSq$inchSq, nmSq$kmSq, nmSq$mSq, nmSq$mileSq, nmSq$mmSq, nmSq$nmSq, nmSq$umSq, nmSq$yardSq, oz$cg, oz$dag, oz$dg, oz$g, oz$hg, oz$kg, oz$lb, oz$mg, oz$ng, oz$oz, oz$st, oz$t, oz$ug, pas$atm, pas$bar, pas$pas, pas$psi, pas$tor, pb$bit, pb$byte, pb$eb, pb$gb, pb$kb, pb$mb, pb$pb, pb$tb, pb$yb, pb$zb, psi$atm, psi$bar, psi$pas, psi$psi, psi$tor, pt$cup, pt$gal, pt$l, pt$ml, pt$pt, pt$qt, pt$tbl, pt$tea, qt$cup, qt$gal, qt$l, qt$ml, qt$pt, qt$qt, qt$tbl, qt$tea, rad$deg, rad$gad, rad$moa, rad$mrad, rad$rad, rad$soa, second$century, second$day, second$decade, second$hour, second$micro, second$millennium, second$milli, second$minute, second$month, second$nano, second$second, second$week, second$year, soa$deg, soa$gad, soa$moa, soa$mrad, soa$rad, soa$soa, st$cg, st$dag, st$dg, st$g, st$hg, st$kg, st$lb, st$mg, st$ng, st$oz, st$st, st$t, st$ug, t$cg, t$dag, t$dg, t$g, t$hg, t$kg, t$lb, t$mg, t$ng, t$oz, t$st, t$t, t$ug, tb$bit, tb$byte, tb$eb, tb$gb, tb$kb, tb$mb, tb$pb, tb$tb, tb$yb, tb$zb, tbl$cup, tbl$gal, tbl$l, tbl$ml, tbl$pt, tbl$qt, tbl$tbl, tbl$tea, tea$cup, tea$gal, tea$l, tea$ml, tea$pt, tea$qt, tea$tbl, tea$tea, tor$atm, tor$bar, tor$pas, tor$psi, tor$tor, ug$cg, ug$dag, ug$dg, ug$g, ug$hg, ug$kg, ug$lb, ug$mg, ug$ng, ug$oz, ug$st, ug$t, ug$ug, um$cm, um$dam, um$dm, um$foot, um$hm, um$inch, um$km, um$m, um$mile, um$mm, um$nm, um$um, um$yard, umCu$cmCu, umCu$damCu, umCu$dmCu, umCu$footCu, umCu$hmCu, umCu$inchCu, umCu$kmCu, umCu$mCu, umCu$mileCu, umCu$mmCu, umCu$nmCu, umCu$umCu, umCu$yardCu, umSq$ac, umSq$cmSq, umSq$damSq, umSq$dmSq, umSq$footSq, umSq$ha, umSq$hmSq, umSq$inchSq, umSq$kmSq, umSq$mSq, umSq$mileSq, umSq$mmSq, umSq$nmSq, umSq$umSq, umSq$yardSq, week$century, week$day, week$decade, week$hour, week$micro, week$millennium, week$milli, week$minute, week$month, week$nano, week$second, week$week, week$year, wh$j, wh$kj, wh$kwh, wh$wh, yard$cm, yard$dam, yard$dm, yard$foot, yard$hm, yard$inch, yard$km, yard$m, yard$mile, yard$mm, yard$nm, yard$um, yard$yard, yardCu$cmCu, yardCu$damCu, yardCu$dmCu, yardCu$footCu, yardCu$hmCu, yardCu$inchCu, yardCu$kmCu, yardCu$mCu, yardCu$mileCu, yardCu$mmCu, yardCu$nmCu, yardCu$umCu, yardCu$yardCu, yardSq$ac, yardSq$cmSq, yardSq$damSq, yardSq$dmSq, yardSq$footSq, yardSq$ha, yardSq$hmSq, yardSq$inchSq, yardSq$kmSq, yardSq$mSq, yardSq$mileSq, yardSq$mmSq, yardSq$nmSq, yardSq$umSq, yardSq$yardSq, yb$bit, yb$byte, yb$eb, yb$gb, yb$kb, yb$mb, yb$pb, yb$tb, yb$yb, yb$zb, year$century, year$day, year$decade, year$hour, year$micro, year$millennium, year$milli, year$minute, year$month, year$nano, year$second, year$week, year$year, zb$bit, zb$byte, zb$eb, zb$gb, zb$kb, zb$mb, zb$pb, zb$tb, zb$yb, zb$zb;

convertAngle = {
  degree: {},
  gradian: {},
  milliradian: {},
  radian: {},
  arcSecond: {},
  arcMinute: {}
};

/* Degree Conversions */
convertAngle.degree.degree = deg$deg = function(deg) {
  return deg; // Degree to Degree
};

convertAngle.degree.gradian = deg$gad = function(deg) {
  return deg * (200 / 180); // Degree to Gradian
};

convertAngle.degree.milliradian = deg$mrad = function(deg) {
  return deg * ((1000 * Math.PI) / 180); // Degree to Milliradian
};

convertAngle.degree.radian = deg$rad = function(deg) {
  return deg * (Math.PI / 180); // Degree to Radian
};

convertAngle.degree.arcSecond = deg$soa = function(deg) {
  return deg * 3600; // Degree to Second of Arc
};

convertAngle.degree.arcMinute = deg$moa = function(deg) {
  return deg * 60; // Degree to Minute of Arc
};

/* Gradian Conversions */
convertAngle.gradian.degree = gad$deg = function(gad) {
  return gad * (180 / 200); // Gradian to Degree
};

convertAngle.gradian.gradian = gad$gad = function(gad) {
  return gad; // Gradian to Gradian
};

convertAngle.gradian.milliradian = gad$mrad = function(gad) {
  return gad * ((1000 * Math.PI) / 200); // Gradian to Milliradian
};

convertAngle.gradian.radian = gad$rad = function(gad) {
  return gad * (Math.PI / 200); // Gradian to Radian
};

convertAngle.gradian.arcSecond = gad$soa = function(gad) {
  return gad * 3240; // Gradian to Second of Arc
};

convertAngle.gradian.arcMinute = gad$moa = function(gad) {
  return gad * 54; // Gradian to Minute of Arc
};

/* Milliradian Conversions */
convertAngle.milliradian.degree = mrad$deg = function(mrad) {
  return mrad * (180 / (1000 * Math.PI)); // Milliradian to Degree
};

convertAngle.milliradian.gradian = mrad$gad = function(mrad) {
  return mrad * (200 / (1000 * Math.PI)); // Milliradian to Gradian
};

convertAngle.milliradian.milliradian = mrad$mrad = function(mrad) {
  return mrad; // Milliradian to Milliradian
};

convertAngle.milliradian.radian = mrad$rad = function(mrad) {
  return mrad / 1000; // Milliradian to Radian
};

convertAngle.milliradian.arcSecond = mrad$soa = function(mrad) {
  return mrad * ((180 * 3600) / (1000 * Math.PI)); // Milliradian to Second of Arc
};

convertAngle.milliradian.arcMinute = mrad$moa = function(mrad) {
  return mrad * ((180 * 60) / (1000 * Math.PI)); // Milliradian to Minute of Arc
};

/* Radian Conversions */
convertAngle.radian.degree = rad$deg = function(rad) {
  return rad * (180 / Math.PI); // Radian to Degree
};

convertAngle.radian.gradian = rad$gad = function(rad) {
  return rad * (200 / Math.PI); // Radian to Gradian
};

convertAngle.radian.milliradian = rad$mrad = function(rad) {
  return rad * 1000; // Radian to Milliradian
};

convertAngle.radian.radian = rad$rad = function(rad) {
  return rad; // Radian to Radian
};

convertAngle.radian.arcSecond = rad$soa = function(rad) {
  return rad * ((180 * 3600) / Math.PI); // Radian to Second of Arc
};

convertAngle.radian.arcMinute = rad$moa = function(rad) {
  return rad * ((180 * 60) / Math.PI); // Radian to Minute of Arc
};

/* Second of Arc Conversions */
convertAngle.arcSecond.degree = soa$deg = function(soa) {
  return soa / 3600; // Second of Arc to Degree
};

convertAngle.arcSecond.gradian = soa$gad = function(soa) {
  return soa / 3240; // Second of Arc to Gradian
};

convertAngle.arcSecond.milliradian = soa$mrad = function(soa) {
  return soa * ((1000 * Math.PI) / (180 * 3600)); // Second of Arc to Milliradian
};

convertAngle.arcSecond.radian = soa$rad = function(soa) {
  return soa * (Math.PI / (180 * 3600)); // Second of Arc to Radian
};

convertAngle.arcSecond.arcSecond = soa$soa = function(soa) {
  return soa; // Second of Arc to Second of Arc
};

convertAngle.arcSecond.arcMinute = soa$moa = function(soa) {
  return soa / 60; // Second of Arc to Minute of Arc
};

/* Minute of Arc Conversions */
convertAngle.arcMinute.degree = moa$deg = function(moa) {
  return moa / 60; // Minute of Arc to Degree
};

convertAngle.arcMinute.gradian = moa$gad = function(moa) {
  return moa / 54; // Minute of Arc to Gradian
};

convertAngle.arcMinute.milliradian = moa$mrad = function(moa) {
  return moa * ((1000 * Math.PI) / (180 * 60)); // Minute of Arc to Milliradian
};

convertAngle.arcMinute.radian = moa$rad = function(moa) {
  return moa * (Math.PI / (180 * 60)); // Minute of Arc to Radian
};

convertAngle.arcMinute.arcSecond = moa$soa = function(moa) {
  return moa * 60; // Minute of Arc to Second of Arc
};

convertAngle.arcMinute.arcMinute = moa$moa = function(moa) {
  return moa; // Minute of Arc to Minute of Arc
};

convertArea = {
  nanometerSq: {},
  micrometerSq: {},
  millimeterSq: {},
  centimeterSq: {},
  decimeterSq: {},
  meterSq: {},
  decameterSq: {},
  hectometerSq: {},
  kilometerSq: {},
  inchSq: {},
  footSq: {},
  yardSq: {},
  mileSq: {},
  acre: {},
  hectare: {}
};

/* Nanometer Squared Conversions */
convertArea.nanometerSq.nanometerSq = nmSq$nmSq = function(nmSq) {
  return nmSq; // Nanometer Squared to Nanometer Squared
};

convertArea.nanometerSq.micrometerSq = nmSq$umSq = function(nmSq) {
  return nmSq / 1e+6; // Nanometer Squared to Micrometer Squared
};

convertArea.nanometerSq.millimeterSq = nmSq$mmSq = function(nmSq) {
  return nmSq / 1e+12; // Nanometer Squared to Millimeter Squared
};

convertArea.nanometerSq.centimeterSq = nmSq$cmSq = function(nmSq) {
  return nmSq / 1e+14; // Nanometer Squared to Centimeter Squared
};

convertArea.nanometerSq.decimeterSq = nmSq$dmSq = function(nmSq) {
  return nmSq / 1e+16; // Nanometer Squared to Decimeter Squared
};

convertArea.nanometerSq.meterSq = nmSq$mSq = function(nmSq) {
  return nmSq / 1e+18; // Nanometer Squared to Meter Squared
};

convertArea.nanometerSq.decameterSq = nmSq$damSq = function(nmSq) {
  return nmSq / 1e+20; // Nanometer Squared to Decameter Squared
};

convertArea.nanometerSq.hectometerSq = nmSq$hmSq = function(nmSq) {
  return nmSq / 1e+22; // Nanometer Squared to Hectometer Squared
};

convertArea.nanometerSq.kilometerSq = nmSq$kmSq = function(nmSq) {
  return nmSq / 1e+24; // Nanometer Squared to Kilometer Squared
};

convertArea.nanometerSq.inchSq = nmSq$inchSq = function(nmSq) {
  return nmSq / 6452e+11; // Nanometer Squared to Inch Squared
};

convertArea.nanometerSq.footSq = nmSq$footSq = function(nmSq) {
  return nmSq / 929e+14; // Nanometer Squared to Foot Squared
};

convertArea.nanometerSq.yardSq = nmSq$yardSq = function(nmSq) {
  return nmSq / 8361e+14; // Nanometer Squared to Yard Squared
};

convertArea.nanometerSq.mileSq = nmSq$mileSq = function(nmSq) {
  return nmSq / 259e+22; // Nanometer Squared to Mile Squared
};

convertArea.nanometerSq.acre = nmSq$ac = function(nmSq) {
  return nmSq / 40469e+17; // Nanometer Squared to Acre
};

convertArea.nanometerSq.hectare = nmSq$ha = function(nmSq) {
  return nmSq / 1e+22; // Nanometer Squared to Hectare
};

/* Micrometer Squared Conversions */
convertArea.micrometerSq.nanometerSq = umSq$nmSq = function(umSq) {
  return umSq * 1e+6; // Micrometer Squared to Nanometer Squared
};

convertArea.micrometerSq.micrometerSq = umSq$umSq = function(umSq) {
  return umSq; // Micrometer Squared to Micrometer Squared
};

convertArea.micrometerSq.millimeterSq = umSq$mmSq = function(umSq) {
  return umSq / 1e+6; // Micrometer Squared to Millimeter Squared
};

convertArea.micrometerSq.centimeterSq = umSq$cmSq = function(umSq) {
  return umSq / 1e+8; // Micrometer Squared to Centimeter Squared
};

convertArea.micrometerSq.decimeterSq = umSq$dmSq = function(umSq) {
  return umSq / 1e+10; // Micrometer Squared to Decimeter Squared
};

convertArea.micrometerSq.meterSq = umSq$mSq = function(umSq) {
  return umSq / 1e+12; // Micrometer Squared to Meter Squared
};

convertArea.micrometerSq.decameterSq = umSq$damSq = function(umSq) {
  return umSq / 1e+14; // Micrometer Squared to Decameter Squared
};

convertArea.micrometerSq.hectometerSq = umSq$hmSq = function(umSq) {
  return umSq / 1e+16; // Micrometer Squared to Hectometer Squared
};

convertArea.micrometerSq.kilometerSq = umSq$kmSq = function(umSq) {
  return umSq / 1e+18; // Micrometer Squared to Kilometer Squared
};

convertArea.micrometerSq.inchSq = umSq$inchSq = function(umSq) {
  return umSq / 6452e+5; // Micrometer Squared to Inch Squared
};

convertArea.micrometerSq.footSq = umSq$footSq = function(umSq) {
  return umSq / 929e+8; // Micrometer Squared to Foot Squared
};

convertArea.micrometerSq.yardSq = umSq$yardSq = function(umSq) {
  return umSq / 8361e+8; // Micrometer Squared to Yard Squared
};

convertArea.micrometerSq.mileSq = umSq$mileSq = function(umSq) {
  return umSq / 259e+16; // Micrometer Squared to Mile Squared
};

convertArea.micrometerSq.acre = umSq$ac = function(umSq) {
  return umSq / 40469e+11; // Micrometer Squared to Acre
};

convertArea.micrometerSq.hectare = umSq$ha = function(umSq) {
  return umSq / 1e+16; // Micrometer Squared to Hectare
};

/* Millimeter Squared Conversions */
convertArea.millimeterSq.nanometerSq = mmSq$nmSq = function(mmSq) {
  return mmSq * 1e+12; // Millimeter Squared to Nanometer Squared
};

convertArea.millimeterSq.micrometerSq = mmSq$umSq = function(mmSq) {
  return mmSq * 1e+6; // Millimeter Squared to Micrometer Squared
};

convertArea.millimeterSq.millimeterSq = mmSq$mmSq = function(mmSq) {
  return mmSq; // Millimeter Squared to Millimeter Squared
};

convertArea.millimeterSq.centimeterSq = mmSq$cmSq = function(mmSq) {
  return mmSq / 1e+2; // Millimeter to Squared Centimeter Squared
};

convertArea.millimeterSq.decimeterSq = mmSq$dmSq = function(mmSq) {
  return mmSq / 1e+4; // Millimeter Squared to Decimeter Squared
};

convertArea.millimeterSq.meterSq = mmSq$mSq = function(mmSq) {
  return mmSq / 1e+6; // Millimeter Squared to Meter Squared
};

convertArea.millimeterSq.decameterSq = mmSq$damSq = function(mmSq) {
  return mmSq / 1e+8; // Millimeter Squared to Decameter Squared
};

convertArea.millimeterSq.hectometerSq = mmSq$hmSq = function(mmSq) {
  return mmSq / 1e+10; // Millimeter Squared to Hectometer Squared
};

convertArea.millimeterSq.kilometerSq = mmSq$kmSq = function(mmSq) {
  return mmSq / 1e+12; // Millimeter Squared to Kilometer Squared
};

convertArea.millimeterSq.inchSq = mmSq$inchSq = function(mmSq) {
  return mmSq / 645.2; // Millimeter Squared to Inch Squared
};

convertArea.millimeterSq.footSq = mmSq$footSq = function(mmSq) {
  return mmSq / 929e+2; // Millimeter Squared to Foot Squared
};

convertArea.millimeterSq.yardSq = mmSq$yardSq = function(mmSq) {
  return mmSq / 8361e+2; // Millimeter Squared to Yard Squared
};

convertArea.millimeterSq.mileSq = mmSq$mileSq = function(mmSq) {
  return mmSq / 259e+10; // Millimeter Squared to Mile Squared
};

convertArea.millimeterSq.acre = mmSq$ac = function(mmSq) {
  return mmSq / 40469e+5; // Millimeter Squared to Acre
};

convertArea.millimeterSq.hectare = mmSq$ha = function(mmSq) {
  return mmSq / 1e+10; // Millimeter Squared to Hectare
};

/* Centimeter Squared Conversions */
convertArea.centimeterSq.nanometerSq = cmSq$nmSq = function(cmSq) {
  return cmSq * 1e+14; // Centimeter Squared to Nanometer Squared
};

convertArea.centimeterSq.micrometerSq = cmSq$umSq = function(cmSq) {
  return cmSq * 1e+8; // Centimeter Squared to Micrometer Squared
};

convertArea.centimeterSq.millimeterSq = cmSq$mmSq = function(cmSq) {
  return cmSq * 1e+2; // Centimeter Squared to Millimeter Squared
};

convertArea.centimeterSq.centimeterSq = cmSq$cmSq = function(cmSq) {
  return cmSq; // Centimeter Squared to Centimeter Squared
};

convertArea.centimeterSq.decimeterSq = cmSq$dmSq = function(cmSq) {
  return cmSq / 1e+2; // Centimeter Squared to Decimeter Squared
};

convertArea.centimeterSq.meterSq = cmSq$mSq = function(cmSq) {
  return cmSq / 1e+4; // Centimeter Squared to Meter Squared
};

convertArea.centimeterSq.decameterSq = cmSq$damSq = function(cmSq) {
  return cmSq / 1e+6; // Centimeter Squared to Decameter Squared
};

convertArea.centimeterSq.hectometerSq = cmSq$hmSq = function(cmSq) {
  return cmSq / 1e+8; // Centimeter Squared to Hectometer Squared
};

convertArea.centimeterSq.kilometerSq = cmSq$kmSq = function(cmSq) {
  return cmSq / 1e+10; // Centimeter Squared to Kilometer Squared
};

convertArea.centimeterSq.inchSq = cmSq$inchSq = function(cmSq) {
  return cmSq / 6.452; // Centimeter Squared to Inch Squared
};

convertArea.centimeterSq.footSq = cmSq$footSq = function(cmSq) {
  return cmSq / 929; // Centimeter Squared to Foot Squared
};

convertArea.centimeterSq.yardSq = cmSq$yardSq = function(cmSq) {
  return cmSq / 8361; // Centimeter Squared to Yard Squared
};

convertArea.centimeterSq.mileSq = cmSq$mileSq = function(cmSq) {
  return cmSq / 259e+8; // Centimeter Squared to Mile Squared
};

convertArea.centimeterSq.acre = cmSq$ac = function(cmSq) {
  return cmSq / 40469e+3; // Centimeter Squared to Acre
};

convertArea.centimeterSq.hectare = cmSq$ha = function(cmSq) {
  return cmSq / 1e+8; // Centimeter Squared to Hectare
};

/* Decimeter Squared Conversions */
convertArea.decimeterSq.nanometerSq = dmSq$nmSq = function(dmSq) {
  return dmSq * 1e+16; // Decimeter Squared to Nanometer Squared
};

convertArea.decimeterSq.micrometerSq = dmSq$umSq = function(dmSq) {
  return dmSq * 1e+10; // Decimeter Squared to Micrometer Squared
};

convertArea.decimeterSq.millimeterSq = dmSq$mmSq = function(dmSq) {
  return dmSq * 1e+4; // Decimeter Squared to Millimeter Squared
};

convertArea.decimeterSq.centimeterSq = dmSq$cmSq = function(dmSq) {
  return dmSq * 1e+2; // Decimeter Squared to Centimeter Squared
};

convertArea.decimeterSq.decimeterSq = dmSq$dmSq = function(dmSq) {
  return dmSq; // Decimeter Squared to Decimeter Squared
};

convertArea.decimeterSq.meterSq = dmSq$mSq = function(dmSq) {
  return dmSq / 1e+2; // Decimeter Squared to Meter Squared
};

convertArea.decimeterSq.decameterSq = dmSq$damSq = function(dmSq) {
  return dmSq / 1e+4; // Decimeter Squared to Decameter Squared
};

convertArea.decimeterSq.hectometerSq = dmSq$hmSq = function(dmSq) {
  return dmSq / 1e+6; // Decimeter Squared to Hectometer Squared
};

convertArea.decimeterSq.kilometerSq = dmSq$kmSq = function(dmSq) {
  return dmSq / 1e+8; // Decimeter Squared to Kilometer Squared
};

convertArea.decimeterSq.inchSq = dmSq$inchSq = function(dmSq) {
  return dmSq * 15.5; // Decimeter Squared to Inch Squared
};

convertArea.decimeterSq.footSq = dmSq$footSq = function(dmSq) {
  return dmSq / 9.29; // Decimeter Squared to Foot Squared
};

convertArea.decimeterSq.yardSq = dmSq$yardSq = function(dmSq) {
  return dmSq / 83.61; // Decimeter Squared to Yard Squared
};

convertArea.decimeterSq.mileSq = dmSq$mileSq = function(dmSq) {
  return dmSq / 259e+6; // Decimeter Squared to Mile Squared
};

convertArea.decimeterSq.acre = dmSq$ac = function(dmSq) {
  return dmSq / 40469e+1; // Decimeter Squared to Acre
};

convertArea.decimeterSq.hectare = dmSq$ha = function(dmSq) {
  return dmSq / 1e+6; // Decimeter Squared to Hectare
};

/* Meter Squared Conversions */
convertArea.meterSq.nanometerSq = mSq$nmSq = function(mSq) {
  return mSq * 1e+18; // Meter Squared to Nanometer Squared
};

convertArea.meterSq.micrometerSq = mSq$umSq = function(mSq) {
  return mSq * 1e+12; // Meter Squared to Micrometer Squared
};

convertArea.meterSq.millimeterSq = mSq$mmSq = function(mSq) {
  return mSq * 1e+6; // Meter Squared to Millimeter Squared
};

convertArea.meterSq.centimeterSq = mSq$cmSq = function(mSq) {
  return mSq * 1e+4; // Meter Squared to Centimeter Squared
};

convertArea.meterSq.decimeterSq = mSq$dmSq = function(mSq) {
  return mSq * 1e+2; // Meter Squared to Decimeter Squared
};

convertArea.meterSq.meterSq = mSq$mSq = function(mSq) {
  return mSq; // Meter Squared to Meter Squared
};

convertArea.meterSq.decameterSq = mSq$damSq = function(mSq) {
  return mSq / 1e+2; // Meter Squared to Decameter Squared
};

convertArea.meterSq.hectometerSq = mSq$hmSq = function(mSq) {
  return mSq / 1e+4; // Meter Squared to Hectometer Squared
};

convertArea.meterSq.kilometerSq = mSq$kmSq = function(mSq) {
  return mSq / 1e+6; // Meter Squared to Kilometer Squared
};

convertArea.meterSq.inchSq = mSq$inchSq = function(mSq) {
  return mSq * 155e+1; // Meter Squared to Inch Squared
};

convertArea.meterSq.footSq = mSq$footSq = function(mSq) {
  return mSq * 10.764; // Meter Squared to Foot Squared
};

convertArea.meterSq.yardSq = mSq$yardSq = function(mSq) {
  return mSq * 1.196; // Meter Squared to Yard Squared
};

convertArea.meterSq.mileSq = mSq$mileSq = function(mSq) {
  return mSq / 259e+4; // Meter Squared to Mile Squared
};

convertArea.meterSq.acre = mSq$ac = function(mSq) {
  return mSq / 4046.9; // Meter Squared to Acre
};

convertArea.meterSq.hectare = mSq$ha = function(mSq) {
  return mSq / 1e+4; // Meter Squared to Hectare
};

/* Decameter Squared Conversions */
convertArea.decameterSq.nanometerSq = damSq$nmSq = function(damSq) {
  return damSq * 1e+20; // Decameter Squared to Nanometer Squared
};

convertArea.decameterSq.micrometerSq = damSq$umSq = function(damSq) {
  return damSq * 1e+14; // Decameter Squared to Micrometer Squared
};

convertArea.decameterSq.millimeterSq = damSq$mmSq = function(damSq) {
  return damSq * 1e+8; // Decameter Squared to Millimeter Squared
};

convertArea.decameterSq.centimeterSq = damSq$cmSq = function(damSq) {
  return damSq * 1e+6; // Decameter Squared to Centimeter Squared
};

convertArea.decameterSq.decimeterSq = damSq$dmSq = function(damSq) {
  return damSq * 1e+4; // Decameter Squared to Decimeter Squared
};

convertArea.decameterSq.meterSq = damSq$mSq = function(damSq) {
  return damSq * 1e+2; // Decameter Squared to Meter Squared
};

convertArea.decameterSq.decameterSq = damSq$damSq = function(damSq) {
  return damSq; // Decameter Squared to Decameter Squared
};

convertArea.decameterSq.hectometerSq = damSq$hmSq = function(damSq) {
  return damSq / 1e+2; // Decameter Squared to Hectometer Squared
};

convertArea.decameterSq.kilometerSq = damSq$kmSq = function(damSq) {
  return damSq / 1e+4; // Decameter Squared to Kilometer Squared
};

convertArea.decameterSq.inchSq = damSq$inchSq = function(damSq) {
  return damSq * 155e+3; // Decameter Squared to Inch Squared
};

convertArea.decameterSq.footSq = damSq$footSq = function(damSq) {
  return damSq * 1076.4; // Decameter Squared to Foot Squared
};

convertArea.decameterSq.yardSq = damSq$yardSq = function(damSq) {
  return damSq * 119.6; // Decameter Squared to Yard Squared
};

convertArea.decameterSq.mileSq = damSq$mileSq = function(damSq) {
  return damSq / 259e+2; // Decameter Squared to Mile Squared
};

convertArea.decameterSq.acre = damSq$ac = function(damSq) {
  return damSq / 40.469; // Decameter Squared to Acre
};

convertArea.decameterSq.hectare = damSq$ha = function(damSq) {
  return damSq / 1e+2; // Decameter Squared to Hectare
};

/* Hectometer Squared Conversions */
convertArea.hectometerSq.nanometerSq = hmSq$nmSq = function(hmSq) {
  return hmSq * 1e+22; // Hectometer Squared to Nanometer Squared
};

convertArea.hectometerSq.micrometerSq = hmSq$umSq = function(hmSq) {
  return hmSq * 1e+16; // Hectometer Squared to Micrometer Squared
};

convertArea.hectometerSq.millimeterSq = hmSq$mmSq = function(hmSq) {
  return hmSq * 1e+10; // Hectometer Squared to Millimeter Squared
};

convertArea.hectometerSq.centimeterSq = hmSq$cmSq = function(hmSq) {
  return hmSq * 1e+8; // Hectometer Squared to Centimeter Squared
};

convertArea.hectometerSq.decimeterSq = hmSq$dmSq = function(hmSq) {
  return hmSq * 1e+6; // Hectometer Squared to Decimeter Squared
};

convertArea.hectometerSq.meterSq = hmSq$mSq = function(hmSq) {
  return hmSq * 1e+4; // Hectometer Squared to Meter Squared
};

convertArea.hectometerSq.decameterSq = hmSq$damSq = function(hmSq) {
  return hmSq * 1e+2; // Hectometer Squared to Decameter Squared
};

convertArea.hectometerSq.hectometerSq = hmSq$hmSq = function(hmSq) {
  return hmSq; // Hectometer Squared to Hectometer Squared
};

convertArea.hectometerSq.kilometerSq = hmSq$kmSq = function(hmSq) {
  return hmSq / 1e+2; // Hectometer Squared to Kilometer Squared
};

convertArea.hectometerSq.inchSq = hmSq$inchSq = function(hmSq) {
  return hmSq * 155e+5; // Hectometer Squared to Inch Squared
};

convertArea.hectometerSq.footSq = hmSq$footSq = function(hmSq) {
  return hmSq * 10764e+1; // Hectometer Squared to Foot Squared
};

convertArea.hectometerSq.yardSq = hmSq$yardSq = function(hmSq) {
  return hmSq * 1196e+1; // Hectometer Squared to Yard Squared
};

convertArea.hectometerSq.mileSq = hmSq$mileSq = function(hmSq) {
  return hmSq / 259; // Hectometer Squared to Mile Squared
};

convertArea.hectometerSq.acre = hmSq$ac = function(hmSq) {
  return hmSq * 2.471; // Hectometer Squared to Acre
};

convertArea.hectometerSq.hectare = hmSq$ha = function(hmSq) {
  return hmSq; // Hectometer Squared to Hectare
};

/* Kilometer Squared Conversions */
convertArea.kilometerSq.nanometerSq = kmSq$nmSq = function(kmSq) {
  return kmSq * 1e+24; // Kilometer Squared to Nanometer Squared
};

convertArea.kilometerSq.micrometerSq = kmSq$umSq = function(kmSq) {
  return kmSq * 1e+18; // Kilometer Squared to Micrometer Squared
};

convertArea.kilometerSq.millimeterSq = kmSq$mmSq = function(kmSq) {
  return kmSq * 1e+12; // Kilometer Squared to Millimeter Squared
};

convertArea.kilometerSq.centimeterSq = kmSq$cmSq = function(kmSq) {
  return kmSq * 1e+10; // Kilometer Squared to Centimeter Squared
};

convertArea.kilometerSq.decimeterSq = kmSq$dmSq = function(kmSq) {
  return kmSq * 1e+8; // Kilometer Squared to Decimeter Squared
};

convertArea.kilometerSq.meterSq = kmSq$mSq = function(kmSq) {
  return kmSq * 1e+6; // Kilometer Squared to Meter Squared
};

convertArea.kilometerSq.decameterSq = kmSq$damSq = function(kmSq) {
  return kmSq * 1e+4; // Kilometer Squared to Decameter Squared
};

convertArea.kilometerSq.hectometerSq = kmSq$hmSq = function(kmSq) {
  return kmSq * 1e+2; // Kilometer Squared to Hectometer Squared
};

convertArea.kilometerSq.kilometerSq = kmSq$kmSq = function(kmSq) {
  return kmSq; // Kilometer Squared to Kilometer Squared
};

convertArea.kilometerSq.inchSq = kmSq$inchSq = function(kmSq) {
  return kmSq * 155e+7; // Kilometer Squared to Inch Squared
};

convertArea.kilometerSq.footSq = kmSq$footSq = function(kmSq) {
  return kmSq * 10764e+3; // Kilometer Squared to Foot Squared
};

convertArea.kilometerSq.yardSq = kmSq$yardSq = function(kmSq) {
  return kmSq * 1196e+3; // Kilometer Squared to Yard Squared
};

convertArea.kilometerSq.mileSq = kmSq$mileSq = function(kmSq) {
  return kmSq / 2.59; // Kilometer Squared to Mile Squared
};

convertArea.kilometerSq.acre = kmSq$ac = function(kmSq) {
  return kmSq * 247.1; // Kilometer Squared to Acre
};

convertArea.kilometerSq.hectare = kmSq$ha = function(kmSq) {
  return kmSq * 100; // Kilometer Squared to Hectare
};

/* Inch Squared Conversions */
convertArea.inchSq.nanometerSq = inchSq$nmSq = function(inchSq) {
  return inchSq * 6452e+11; // Inch Squared to Nanometer Squared
};

convertArea.inchSq.micrometerSq = inchSq$umSq = function(inchSq) {
  return inchSq * 6452e+5; // Inch Squared to Micrometer Squared
};

convertArea.inchSq.millimeterSq = inchSq$mmSq = function(inchSq) {
  return inchSq * 645.2; // Inch Squared to Millimeter Squared
};

convertArea.inchSq.centimeterSq = inchSq$cmSq = function(inchSq) {
  return inchSq * 6.452; // Inch Squared to Centimeter Squared
};

convertArea.inchSq.decimeterSq = inchSq$dmSq = function(inchSq) {
  return inchSq / 15.5; // Inch Squared to Decimeter Squared
};

convertArea.inchSq.meterSq = inchSq$mSq = function(inchSq) {
  return inchSq / 155e+1; // Inch Squared to Meter Squared
};

convertArea.inchSq.decameterSq = inchSq$damSq = function(inchSq) {
  return inchSq / 155e+3; // Inch Squared to Decameter Squared
};

convertArea.inchSq.hectometerSq = inchSq$hmSq = function(inchSq) {
  return inchSq / 155e+5; // Inch Squared to Hectometer Squared
};

convertArea.inchSq.kilometerSq = inchSq$kmSq = function(inchSq) {
  return inchSq / 155e+7; // Inch Squared to Kilometer Squared
};

convertArea.inchSq.inchSq = inchSq$inchSq = function(inchSq) {
  return inchSq; // Inch Squared to Inch Squared
};

convertArea.inchSq.footSq = inchSq$footSq = function(inchSq) {
  return inchSq / 144; // Inch Squared to Foot Squared
};

convertArea.inchSq.yardSq = inchSq$yardSq = function(inchSq) {
  return inchSq / 1296; // Inch Squared to Yard Squared
};

convertArea.inchSq.mileSq = inchSq$mileSq = function(inchSq) {
  return inchSq / 4014e+6; // Inch Squared to Mile Squared
};

convertArea.inchSq.acre = inchSq$ac = function(inchSq) {
  return inchSq / 6273e+3; // Inch Squared to Acre
};

convertArea.inchSq.hectare = inchSq$ha = function(inchSq) {
  return inchSq / 155e+5; // Inch Squared to Hectare
};

/* Foot Squared Conversions */
convertArea.footSq.nanometerSq = footSq$nmSq = function(footSq) {
  return footSq * 929e+14; // Foot Squared to Nanometer Squared
};

convertArea.footSq.micrometerSq = footSq$umSq = function(footSq) {
  return footSq * 929e+8; // Foot Squared to Micrometer Squared
};

convertArea.footSq.millimeterSq = footSq$mmSq = function(footSq) {
  return footSq * 929e+2; // Foot Squared to Millimeter Squared
};

convertArea.footSq.centimeterSq = footSq$cmSq = function(footSq) {
  return footSq * 929; // Foot Squared to Centimeter Squared
};

convertArea.footSq.decimeterSq = footSq$dmSq = function(footSq) {
  return footSq * 9.29; // Foot Squared to Decimeter Squared
};

convertArea.footSq.meterSq = footSq$mSq = function(footSq) {
  return footSq / 10.764; // Foot Squared to Meter Squared
};

convertArea.footSq.decameterSq = footSq$damSq = function(footSq) {
  return footSq / 1076.4; // Foot Squared to Decameter Squared
};

convertArea.footSq.hectometerSq = footSq$hmSq = function(footSq) {
  return footSq / 10764e+1; // Foot Squared to Hectometer Squared
};

convertArea.footSq.kilometerSq = footSq$kmSq = function(footSq) {
  return footSq / 10764e+3; // Foot Squared to Kilometer Squared
};

convertArea.footSq.inchSq = footSq$inchSq = function(footSq) {
  return footSq * 144; // Foot Squared to Inch Squared
};

convertArea.footSq.footSq = footSq$footSq = function(footSq) {
  return footSq; // Foot Squared to Foot Squared
};

convertArea.footSq.yardSq = footSq$yardSq = function(footSq) {
  return footSq / 9; // Foot Squared to Yard Squared
};

convertArea.footSq.mileSq = footSq$mileSq = function(footSq) {
  return footSq / 2788e+4; // Foot Squared to Mile Squared
};

convertArea.footSq.acre = footSq$ac = function(footSq) {
  return footSq / 4356e+1; // Foot Squared to Acre
};

convertArea.footSq.hectare = footSq$ha = function(footSq) {
  return footSq / 1076e+2; // Foot Squared to Hectare
};

/* Yard Squared Conversions */
convertArea.yardSq.nanometerSq = yardSq$nmSq = function(yardSq) {
  return yardSq * 8361e+14; // Yard Squared to Nanometer Squared
};

convertArea.yardSq.micrometerSq = yardSq$umSq = function(yardSq) {
  return yardSq * 8361e+8; // Yard Squared to Micrometer Squared
};

convertArea.yardSq.millimeterSq = yardSq$mmSq = function(yardSq) {
  return yardSq * 8361e+2; // Yard Squared to Millimeter Squared
};

convertArea.yardSq.centimeterSq = yardSq$cmSq = function(yardSq) {
  return yardSq * 8361; // Yard Squared to Centimeter Squared
};

convertArea.yardSq.decimeterSq = yardSq$dmSq = function(yardSq) {
  return yardSq * 83.61; // Yard Squared to Decimeter Squared
};

convertArea.yardSq.meterSq = yardSq$mSq = function(yardSq) {
  return yardSq / 1.196; // Yard Squared to Meter Squared
};

convertArea.yardSq.decameterSq = yardSq$damSq = function(yardSq) {
  return yardSq / 119.6; // Yard Squared to Decameter Squared
};

convertArea.yardSq.hectometerSq = yardSq$hmSq = function(yardSq) {
  return yardSq / 1196e+1; // Yard Squared to Hectometer Squared
};

convertArea.yardSq.kilometerSq = yardSq$kmSq = function(yardSq) {
  return yardSq / 1196e+3; // Yard Squared to Kilometer Squared
};

convertArea.yardSq.inchSq = yardSq$inchSq = function(yardSq) {
  return yardSq * 1296; // Yard Squared to Inch Squared
};

convertArea.yardSq.footSq = yardSq$footSq = function(yardSq) {
  return yardSq * 9; // Yard Squared to Foot Squared
};

convertArea.yardSq.yardSq = yardSq$yardSq = function(yardSq) {
  return yardSq; // Yard Squared to Yard Squared
};

convertArea.yardSq.mileSq = yardSq$mileSq = function(yardSq) {
  return yardSq / 3098e+3; // Yard Squared to Mile Squared
};

convertArea.yardSq.acre = yardSq$ac = function(yardSq) {
  return yardSq / 484e+1; // Yard Squared to Acre
};

convertArea.yardSq.hectare = yardSq$ha = function(yardSq) {
  return yardSq / 1196e+1; // Yard Squared to Hectare
};

/* Mile Squared Conversions */
convertArea.mileSq.nanometerSq = mileSq$nmSq = function(mileSq) {
  return mileSq * 259e+22; // Mile Squared to Nanometer Squared
};

convertArea.mileSq.micrometerSq = mileSq$umSq = function(mileSq) {
  return mileSq * 259e+16; // Mile Squared to Micrometer Squared
};

convertArea.mileSq.millimeterSq = mileSq$mmSq = function(mileSq) {
  return mileSq * 259e+10; // Mile Squared to Millimeter Squared
};

convertArea.mileSq.centimeterSq = mileSq$cmSq = function(mileSq) {
  return mileSq * 259e+8; // Mile Squared to Centimeter Squared
};

convertArea.mileSq.decimeterSq = mileSq$dmSq = function(mileSq) {
  return mileSq * 259e+6; // Mile Squared to Decimeter Squared
};

convertArea.mileSq.meterSq = mileSq$mSq = function(mileSq) {
  return mileSq * 259e+4; // Mile Squared to Meter Squared
};

convertArea.mileSq.decameterSq = mileSq$damSq = function(mileSq) {
  return mileSq * 259e+2; // Mile Squared to Decameter Squared
};

convertArea.mileSq.hectometerSq = mileSq$hmSq = function(mileSq) {
  return mileSq * 259; // Mile Squared to Hectometer Squared
};

convertArea.mileSq.kilometerSq = mileSq$kmSq = function(mileSq) {
  return mileSq * 2.59; // Mile Squared to Kilometer Squared
};

convertArea.mileSq.inchSq = mileSq$inchSq = function(mileSq) {
  return mileSq * 4014e+6; // Mile Squared to Inch Squared
};

convertArea.mileSq.footSq = mileSq$footSq = function(mileSq) {
  return mileSq * 2788e+4; // Mile Squared to Foot Squared
};

convertArea.mileSq.yardSq = mileSq$yardSq = function(mileSq) {
  return mileSq * 3098e+3; // Mile Squared to Yard Squared
};

convertArea.mileSq.mileSq = mileSq$mileSq = function(mileSq) {
  return mileSq; // Mile Squared to Mile Squared
};

convertArea.mileSq.acre = mileSq$ac = function(mileSq) {
  return mileSq * 640; // Mile Squared to Acre
};

convertArea.mileSq.hectare = mileSq$ha = function(mileSq) {
  return mileSq * 259; // Mile Squared to Hectare
};

/* Acre Conversions */
convertArea.acre.nanometerSq = ac$nmSq = function(ac) {
  return ac * 40469e+17; // Acre to Nanometer Squared
};

convertArea.acre.micrometerSq = ac$umSq = function(ac) {
  return ac * 40469e+11; // Acre to Micrometer Squared
};

convertArea.acre.millimeterSq = ac$mmSq = function(ac) {
  return ac * 40469e+5; // Acre to Millimeter Squared
};

convertArea.acre.centimeterSq = ac$cmSq = function(ac) {
  return ac * 40469e+3; // Acre to Centimeter Squared
};

convertArea.acre.decimeterSq = ac$dmSq = function(ac) {
  return ac * 40469e+1; // Acre to Decimeter Squared
};

convertArea.acre.meterSq = ac$mSq = function(ac) {
  return ac * 4046.9; // Acre to Meter Squared
};

convertArea.acre.decameterSq = ac$damSq = function(ac) {
  return ac * 40.469; // Acre to Decameter Squared
};

convertArea.acre.hectometerSq = ac$hmSq = function(ac) {
  return ac / 2.471; // Acre to Hectometer Squared
};

convertArea.acre.kilometerSq = ac$kmSq = function(ac) {
  return ac / 247.1; // Acre to Kilometer Squared
};

convertArea.acre.inchSq = ac$inchSq = function(ac) {
  return ac * 6273e+3; // Acre to Inch Squared
};

convertArea.acre.footSq = ac$footSq = function(ac) {
  return ac * 4356e+1; // Acre to Foot Squared
};

convertArea.acre.yardSq = ac$yardSq = function(ac) {
  return ac * 484e+1; // Acre to Yard Squared
};

convertArea.acre.mileSq = ac$mileSq = function(ac) {
  return ac / 640; // Acre to Mile Squared
};

convertArea.acre.acre = ac$ac = function(ac) {
  return ac; // Acre to Acre
};

convertArea.acre.hectare = ac$ha = function(ac) {
  return ac / 2.471; // Acre to Hectare
};

/* Hectare Conversions */
convertArea.hectare.nanometerSq = ha$nmSq = function(ha) {
  return ha * 1e+22; // Hectare to Nanometer Squared
};

convertArea.hectare.micrometerSq = ha$umSq = function(ha) {
  return ha * 1e+16; // Hectare to Micrometer Squared
};

convertArea.hectare.millimeterSq = ha$mmSq = function(ha) {
  return ha * 1e+10; // Hectare to Millimeter Squared
};

convertArea.hectare.centimeterSq = ha$cmSq = function(ha) {
  return ha * 1e+8; // Hectare to Centimeter Squared
};

convertArea.hectare.decimeterSq = ha$dmSq = function(ha) {
  return ha * 1e+6; // Hectare to Decimeter Squared
};

convertArea.hectare.meterSq = ha$mSq = function(ha) {
  return ha * 1e+4; // Hectare to Meter Squared
};

convertArea.hectare.decameterSq = ha$damSq = function(ha) {
  return ha * 1e+2; // Hectare to Decameter Squared
};

convertArea.hectare.hectometerSq = ha$hmSq = function(ha) {
  return ha; // Hectare to Hectometer Squared
};

convertArea.hectare.kilometerSq = ha$kmSq = function(ha) {
  return ha / 100; // Hectare to Kilometer Squared
};

convertArea.hectare.inchSq = ha$inchSq = function(ha) {
  return ha * 155e+5; // Hectare to Inch Squared
};

convertArea.hectare.footSq = ha$footSq = function(ha) {
  return ha * 1076e+2; // Hectare to Foot Squared
};

convertArea.hectare.yardSq = ha$yardSq = function(ha) {
  return ha * 1196e+1; // Hectare to Yard Squared
};

convertArea.hectare.mileSq = ha$mileSq = function(ha) {
  return ha / 259; // Hectare to Mile Squared
};

convertArea.hectare.acre = ha$ac = function(ha) {
  return ha * 2.471; // Hectare to Acre
};

convertArea.hectare.hectare = ha$ha = function(ha) {
  return ha; // Hectare to Hectare
};

convertData = {
  bit: {},
  byte: {},
  kilobyte: {},
  megabyte: {},
  gigabyte: {},
  terrabyte: {},
  petabyte: {},
  exabyte: {},
  zettabyte: {},
  yottabyte: {}
};

/* Bit Conversions */
convertData.bit.bit = bit$bit = function(bit) {
  return bit; // Bit to Bit
};

convertData.bit.byte = bit$byte = function(bit) {
  return bit / 8; // Bit to Byte
};

convertData.bit.kilobyte = bit$kb = function(bit) {
  return bit / 8e+3; // Bit to Kilobyte
};

convertData.bit.megabyte = bit$mb = function(bit) {
  return bit / 8e+6; // Bit to Megabyte
};

convertData.bit.gigabyte = bit$gb = function(bit) {
  return bit / 8e+9; // Bit to Gigabyte
};

convertData.bit.terrabyte = bit$tb = function(bit) {
  return bit / 8e+12; // Bit to Terrabyte
};

convertData.bit.petabyte = bit$pb = function(bit) {
  return bit / 8e+15; // Bit to Petabyte
};

convertData.bit.exabyte = bit$eb = function(bit) {
  return bit / 8e+18; // Bit to Exabyte
};

convertData.bit.zettabyte = bit$zb = function(bit) {
  return bit / 8e+21; // Bit to Zettabyte
};

convertData.bit.yottabyte = bit$yb = function(bit) {
  return bit / 8e+24; // Bit to Yottabyte
};

/* Byte Conversions */
convertData.byte.bit = byte$bit = function(byte) {
  return byte * 8; // Byte to Bit
};

convertData.byte.byte = byte$byte = function(byte) {
  return byte; // Byte to Byte
};

convertData.byte.kilobyte = byte$kb = function(byte) {
  return byte / 1e+3; // Byte to Kilobyte
};

convertData.byte.megabyte = byte$mb = function(byte) {
  return byte / 1e+6; // Byte to Megabyte
};

convertData.byte.gigabyte = byte$gb = function(byte) {
  return byte / 1e+9; // Byte to Gigabyte
};

convertData.byte.terrabyte = byte$tb = function(byte) {
  return byte / 1e+12; // Byte to Terrabyte
};

convertData.byte.petabyte = byte$pb = function(byte) {
  return byte / 1e+15; // Byte to Petabyte
};

convertData.byte.exabyte = byte$eb = function(byte) {
  return byte / 1e+18; // Byte to Exabyte
};

convertData.byte.zettabyte = byte$zb = function(byte) {
  return byte / 1e+21; // Byte to Zettabyte
};

convertData.byte.yottabyte = byte$yb = function(byte) {
  return byte / 1e+24; // Byte to Yottabyte
};

/* Kilobyte Conversions */
convertData.kilobyte.bit = kb$bit = function(kb) {
  return kb * 8e+3; // Kilobyte to Bit
};

convertData.kilobyte.byte = kb$byte = function(kb) {
  return kb * 1e+3; // Kilobyte to Byte
};

convertData.kilobyte.kilobyte = kb$kb = function(kb) {
  return kb; // Kilobyte to Kilobyte
};

convertData.kilobyte.megabyte = kb$mb = function(kb) {
  return kb / 1e+3; // Kilobyte to Megabyte
};

convertData.kilobyte.gigabyte = kb$gb = function(kb) {
  return kb / 8e+6; // Kilobyte to Gigabyte
};

convertData.kilobyte.terrabyte = kb$tb = function(kb) {
  return kb / 8e+9; // Kilobyte to Terrabyte
};

convertData.kilobyte.petabyte = kb$pb = function(kb) {
  return kb / 8e+12; // Kilobyte to Petabyte
};

convertData.kilobyte.exabyte = kb$eb = function(kb) {
  return kb / 8e+15; // Kilobyte to Exabyte
};

convertData.kilobyte.zettabyte = kb$zb = function(kb) {
  return kb / 8e+18; // Kilobyte to Zettabyte
};

convertData.kilobyte.yottabyte = kb$yb = function(kb) {
  return kb / 8e+21; // Kilobyte to Yottabyte
};

/* Megabyte Conversions */
convertData.megabyte.bit = mb$bit = function(mb) {
  return mb * 8e+6; // Megabyte to Bit
};

convertData.megabyte.byte = mb$byte = function(mb) {
  return mb * 1e+6; // Megabyte to Byte
};

convertData.megabyte.kilobyte = mb$kb = function(mb) {
  return mb * 1e+3; // Megabyte to Kilobyte
};

convertData.megabyte.megabyte = mb$mb = function(mb) {
  return mb; // Megabyte to Megabyte
};

convertData.megabyte.gigabyte = mb$gb = function(mb) {
  return mb / 1e+3; // Megabyte to Gigabyte
};

convertData.megabyte.terrabyte = mb$tb = function(mb) {
  return mb / 1e+6; // Megabyte to Terrabyte
};

convertData.megabyte.petabyte = mb$pb = function(mb) {
  return mb / 1e+9; // Megabyte to Petabyte
};

convertData.megabyte.exabyte = mb$eb = function(mb) {
  return mb / 1e+12; // Megabyte to Exabyte
};

convertData.megabyte.zettabyte = mb$zb = function(mb) {
  return mb / 1e+15; // Megabyte to Zettabyte
};

convertData.megabyte.yottabyte = mb$yb = function(mb) {
  return mb / 1e+18; // Megabyte to Yottabyte
};

/* Gigabyte Conversions */
convertData.gigabyte.bit = gb$bit = function(gb) {
  return gb * 8e+9; // Gigabyte to Bit
};

convertData.gigabyte.byte = gb$byte = function(gb) {
  return gb * 1e+9; // Gigabyte to Byte
};

convertData.gigabyte.kilobyte = gb$kb = function(gb) {
  return gb * 1e+6; // Gigabyte to Kilobyte
};

convertData.gigabyte.megabyte = gb$mb = function(gb) {
  return gb * 1e+3; // Gigabyte to Megabyte
};

convertData.gigabyte.gigabyte = gb$gb = function(gb) {
  return gb; // Gigabyte to Gigabyte
};

convertData.gigabyte.terrabyte = gb$tb = function(gb) {
  return gb / 1e+3; // Gigabyte to Terrabyte
};

convertData.gigabyte.petabyte = gb$pb = function(gb) {
  return gb / 1e+6; // Gigabyte to Petabyte
};

convertData.gigabyte.exabyte = gb$eb = function(gb) {
  return gb / 1e+9; // Gigabyte to Exabyte
};

convertData.gigabyte.zettabyte = gb$zb = function(gb) {
  return gb / 1e+12; // Gigabyte to Zettabyte
};

convertData.gigabyte.yottabyte = gb$yb = function(gb) {
  return gb / 1e+15; // Gigabyte to Yottabyte
};

/* Terrabyte Conversions */
convertData.terrabyte.bit = tb$bit = function(tb) {
  return tb * 8e+12; // Terrabyte to Bit
};

convertData.terrabyte.byte = tb$byte = function(tb) {
  return tb * 1e+12; // Terrabyte to Byte
};

convertData.terrabyte.kilobyte = tb$kb = function(tb) {
  return tb * 1e+9; // Terrabyte to Kilobyte
};

convertData.terrabyte.megabyte = tb$mb = function(tb) {
  return tb * 1e+6; // Terrabyte to Megabyte
};

convertData.terrabyte.gigabyte = tb$gb = function(tb) {
  return tb * 1e+3; // Terrabyte to Gigabyte
};

convertData.terrabyte.terrabyte = tb$tb = function(tb) {
  return tb; // Terrabyte to Terrabyte
};

convertData.terrabyte.petabyte = tb$pb = function(tb) {
  return tb / 1e+3; // Terrabyte to Petabyte
};

convertData.terrabyte.exabyte = tb$eb = function(tb) {
  return tb / 1e+6; // Terrabyte to Exabyte
};

convertData.terrabyte.zettabyte = tb$zb = function(tb) {
  return tb / 1e+9; // Terrabyte to Zettabyte
};

convertData.terrabyte.yottabyte = tb$yb = function(tb) {
  return tb / 1e+12; // Terrabyte to Yottabyte
};

/* Petabyte Conversions */
convertData.petabyte.bit = pb$bit = function(pb) {
  return pb * 8e+15; // Petabyte to Bit
};

convertData.petabyte.byte = pb$byte = function(pb) {
  return pb * 1e+15; // Petabyte to Byte
};

convertData.petabyte.kilobyte = pb$kb = function(pb) {
  return pb * 1e+12; // Petabyte to Kilobyte
};

convertData.petabyte.megabyte = pb$mb = function(pb) {
  return pb * 1e+9; // Petabyte to Megabyte
};

convertData.petabyte.gigabyte = pb$gb = function(pb) {
  return pb * 1e+6; // Petabyte to Gigabyte
};

convertData.petabyte.terrabyte = pb$tb = function(pb) {
  return pb * 1e+3; // Petabyte to Terrabyte
};

convertData.petabyte.petabyte = pb$pb = function(pb) {
  return pb; // Petabyte to Petabyte
};

convertData.petabyte.exabyte = pb$eb = function(pb) {
  return pb / 1e+3; // Petabyte to Exabyte
};

convertData.petabyte.zettabyte = pb$zb = function(pb) {
  return pb / 1e+6; // Petabyte to Zettabyte
};

convertData.petabyte.yottabyte = pb$yb = function(pb) {
  return pb / 1e+9; // Petabyte to Yottabyte
};

/* Exabyte Conversions */
convertData.exabyte.bit = eb$bit = function(eb) {
  return eb * 8e+18; // Exabyte to Bit
};

convertData.exabyte.byte = eb$byte = function(eb) {
  return eb * 1e+18; // Exabyte to Byte
};

convertData.exabyte.kilobyte = eb$kb = function(eb) {
  return eb * 1e+15; // Exabyte to Kilobyte
};

convertData.exabyte.megabyte = eb$mb = function(eb) {
  return eb * 1e+12; // Exabyte to Megabyte
};

convertData.exabyte.gigabyte = eb$gb = function(eb) {
  return eb * 1e+9; // Exabyte to Gigabyte
};

convertData.exabyte.terrabyte = eb$tb = function(eb) {
  return eb * 1e+6; // Exabyte to Terrabyte
};

convertData.exabyte.petabyte = eb$pb = function(eb) {
  return eb * 1e+3; // Exabyte to Petabyte
};

convertData.exabyte.exabyte = eb$eb = function(eb) {
  return eb; // Exabyte to Exabyte
};

convertData.exabyte.zettabyte = eb$zb = function(eb) {
  return eb / 1e+3; // Exabyte to Zettabyte
};

convertData.exabyte.yottabyte = eb$yb = function(eb) {
  return eb / 1e+6; // Exabyte to Yottabyte
};

/* Zettabyte Conversions */
convertData.zettabyte.bit = zb$bit = function(zb) {
  return zb * 8e+21; // Zettabyte to Bit
};

convertData.zettabyte.byte = zb$byte = function(zb) {
  return zb * 1e+21; // Zettabyte to Byte
};

convertData.zettabyte.kilobyte = zb$kb = function(zb) {
  return zb * 1e+18; // Zettabyte to Kilobyte
};

convertData.zettabyte.megabyte = zb$mb = function(zb) {
  return zb * 1e+15; // Zettabyte to Megabyte
};

convertData.zettabyte.gigabyte = zb$gb = function(zb) {
  return zb * 1e+12; // Zettabyte to Gigabyte
};

convertData.zettabyte.terrabyte = zb$tb = function(zb) {
  return zb * 1e+9; // Zettabyte to Terrabyte
};

convertData.zettabyte.petabyte = zb$pb = function(zb) {
  return zb * 1e+6; // Zettabyte to Petabyte
};

convertData.zettabyte.exabyte = zb$eb = function(zb) {
  return zb * 1e+3; // Zettabyte to Exabyte
};

convertData.zettabyte.zettabyte = zb$zb = function(zb) {
  return zb; // Zettabyte to Zettabyte
};

convertData.zettabyte.yottabyte = zb$yb = function(zb) {
  return zb / 1e+3; // Zettabyte to Yottabyte
};

/* Yottabyte Conversions */
convertData.yottabyte.bit = yb$bit = function(yb) {
  return yb * 8e+24; // Yottabyte to Bit
};

convertData.yottabyte.byte = yb$byte = function(yb) {
  return yb * 1e+24; // Yottabyte to Byte
};

convertData.yottabyte.kilobyte = yb$kb = function(yb) {
  return yb * 1e+21; // Yottabyte to Kilobyte
};

convertData.yottabyte.megabyte = yb$mb = function(yb) {
  return yb * 1e+18; // Yottabyte to Megabyte
};

convertData.yottabyte.gigabyte = yb$gb = function(yb) {
  return yb * 1e+15; // Yottabyte to Gigabyte
};

convertData.yottabyte.terrabyte = yb$tb = function(yb) {
  return yb * 1e+12; // Yottabyte to Terrabyte
};

convertData.yottabyte.petabyte = yb$pb = function(yb) {
  return yb * 1e+9; // Yottabyte to Petabyte
};

convertData.yottabyte.exabyte = yb$eb = function(yb) {
  return yb * 1e+6; // Yottabyte to Exabyte
};

convertData.yottabyte.zettabyte = yb$zb = function(yb) {
  return yb * 1e+3; // Yottabyte to Zettabyte
};

convertData.yottabyte.yottabyte = yb$yb = function(yb) {
  return yb; // Yottabyte to Yottabyte
};

convertDimension = {
  d2: {},
  d3: {}
};

/* 2D Conversions */
// Credit: https://stackoverflow.com/a/13091694/1544937
convertDimension.d2.d3 = d2$d3 = function(x, y, zTarget = 0) {
  var coordinates, distance, vector;
  vector = new THREE.Vector3();
  coordinates = new THREE.Vector3();
  vector.set((x / window.innerWidth) * 2 - 1, -(y / window.innerHeight) * 2 + 1, 0);
  vector.unproject(camera);
  vector.sub(camera.position).normalize();
  distance = (zTarget - camera.position.z) / vector.z;
  coordinates.copy(camera.position).add(vector.multiplyScalar(distance));
  return coordinates;
};

convertDimension.d2.d2 = d2$d2 = function(x, y) {
  return new THREE.Vector2(x, y);
};

/* 3D Conversions */
// Credit: https://stackoverflow.com/a/36706930/1544937
convertDimension.d3.d2 = d3$d2 = function(x, y, z) {
  var coordinates, halfHeight, halfWidth;
  halfWidth = window.innerWidth / 2;
  halfHeight = window.innerHeight / 2;
  coordinates = new THREE.Vector3(x, y, z);
  coordinates.project(camera);
  coordinates.x = coordinates.x * halfWidth + halfWidth;
  coordinates.y = -coordinates.y * halfHeight + halfHeight;
  return new THREE.Vector2(coordinates.x, coordinates.y);
};

convertDimension.d3.d3 = d3$d3 = function(x, y, z) {
  return new THREE.Vector3(x, y, z);
};

convertEnergy = {
  joule: {},
  kilojoule: {},
  watt: {},
  kilowatt: {}
};

/* Joule Conversions */
convertEnergy.joule.joule = j$j = function(j) {
  return j; // Joule to Joule
};

convertEnergy.joule.kilojoule = j$kj = function(j) {
  return j / 1e+3; // Joule to Kilojoule
};

convertEnergy.joule.watt = j$wh = function(j) {
  return j / 36e+2; // Joule to Watt
};

convertEnergy.joule.kilowatt = j$kwh = function(j) {
  return j / 36e+5; // Joule to Kilowatt
};

/* Kilojoule Conversions */
convertEnergy.kilojoule.joule = kj$j = function(kj) {
  return kj * 1e+3; // Kilojoule to Joule
};

convertEnergy.kilojoule.kilojoule = kj$kj = function(kj) {
  return kj; // Kilojoule to Kilojoule
};

convertEnergy.kilojoule.watt = kj$wh = function(kj) {
  return kj / 3.6; // Kilojoule to Watt
};

convertEnergy.kilojoule.kilowatt = kj$kwh = function(kj) {
  return kj / 36e+2; // Kilojoule to Kilowatt
};

/* Watt Conversions */
convertEnergy.watt.joule = wh$j = function(wh) {
  return wh * 36e+2; // Watt to Joule
};

convertEnergy.watt.kilojoule = wh$kj = function(wh) {
  return wh * 3.6; // Watt to Kilojoule
};

convertEnergy.watt.watt = wh$wh = function(wh) {
  return wh; // Watt to Watt
};

convertEnergy.watt.kilowatt = wh$kwh = function(wh) {
  return wh / 1e+3; // Watt to Kilowatt
};

/* Kilowatt Conversions */
convertEnergy.kilowatt.joule = kwh$j = function(kwh) {
  return kwh * 36e+5; // Kilowatt to Joule
};

convertEnergy.kilowatt.kilojoule = kwh$kj = function(kwh) {
  return kwh * 36e+2; // Kilowatt to Kilojoule
};

convertEnergy.kilowatt.watt = kwh$wh = function(kwh) {
  return kwh * 1e+3; // Kilowatt to Watt
};

convertEnergy.kilowatt.kilowatt = kwh$kwh = function(kwh) {
  return kwh; // Kilowatt to Kilowatt
};

convertFrequency = {
  hertz: {},
  kilohertz: {},
  megahertz: {},
  gigahertz: {}
};

/* Hertz Conversions */
convertFrequency.hertz.hertz = hz$hz = function(hz) {
  return hz; // Hertz to Hertz
};

convertFrequency.hertz.kilohertz = hz$khz = function(hz) {
  return hz / 1e+3; // Hertz to Kilohertz
};

convertFrequency.hertz.megahertz = hz$mhz = function(hz) {
  return hz / 1e+6; // Hertz to Megahertz
};

convertFrequency.hertz.gigahertz = hz$ghz = function(hz) {
  return hz / 1e+9; // Hertz to Gigahertz
};

/* Kilohertz Conversions */
convertFrequency.kilohertz.hertz = khz$hz = function(khz) {
  return khz * 1e+3; // Kilohertz to Hertz
};

convertFrequency.kilohertz.kilohertz = khz$khz = function(khz) {
  return khz; // Kilohertz to Kilohertz
};

convertFrequency.kilohertz.megahertz = khz$mhz = function(khz) {
  return khz / 1e+3; // Kilohertz to Megahertz
};

convertFrequency.kilohertz.gigahertz = khz$ghz = function(khz) {
  return khz / 1e+6; // Kilohertz to Gigahertz
};

/* Megahertz Conversions */
convertFrequency.megahertz.hertz = mhz$hz = function(mhz) {
  return mhz * 1e+6; // Megahertz to Hertz
};

convertFrequency.megahertz.kilohertz = mhz$khz = function(mhz) {
  return mhz * 1e+3; // Megahertz to Kilohertz
};

convertFrequency.megahertz.megahertz = mhz$mhz = function(mhz) {
  return mhz; // Megahertz to Megahertz
};

convertFrequency.megahertz.gigahertz = mhz$ghz = function(mhz) {
  return mhz / 1e+3; // Megahertz to Gigahertz
};

/* Gigahertz Conversions */
convertFrequency.gigahertz.hertz = ghz$hz = function(ghz) {
  return ghz * 1e+9; // Gigahertz to Hertz
};

convertFrequency.gigahertz.kilohertz = ghz$khz = function(ghz) {
  return ghz * 1e+6; // Gigahertz to Kilohertz
};

convertFrequency.gigahertz.megahertz = ghz$mhz = function(ghz) {
  return ghz * 1e+3; // Gigahertz to Megahertz
};

convertFrequency.gigahertz.gigahertz = ghz$ghz = function(ghz) {
  return ghz; // Gigahertz to Gigahertz
};

convertLength = {
  nanometer: {},
  micrometer: {},
  millimeter: {},
  centimeter: {},
  decimeter: {},
  meter: {},
  decameter: {},
  hectometer: {},
  kilometer: {},
  inch: {},
  foot: {},
  yard: {},
  mile: {}
};

/* Nanometer Conversions */
convertLength.nanometer.nanometer = nm$nm = function(nm) {
  return nm; // Nanometer to Nanometer
};

convertLength.nanometer.micrometer = nm$um = function(nm) {
  return nm / 1e+3; // Nanometer to Micrometer
};

convertLength.nanometer.millimeter = nm$mm = function(nm) {
  return nm / 1e+6; // Nanometer to Millimeter
};

convertLength.nanometer.centimeter = nm$cm = function(nm) {
  return nm / 1e+7; // Nanometer to Centimeter
};

convertLength.nanometer.decimeter = nm$dm = function(nm) {
  return nm / 1e+8; // Nanometer to Decimeter
};

convertLength.nanometer.meter = nm$m = function(nm) {
  return nm / 1e+9; // Nanometer to Meter
};

convertLength.nanometer.decameter = nm$dam = function(nm) {
  return nm / 1e+10; // Nanometer to Decameter
};

convertLength.nanometer.hectometer = nm$hm = function(nm) {
  return nm / 1e+11; // Nanometer to Hectometer
};

convertLength.nanometer.kilometer = nm$km = function(nm) {
  return nm / 1e+12; // Nanometer to Kilometer
};

convertLength.nanometer.inch = nm$inch = function(nm) {
  return nm / 254e+5; // Nanometer to Inch
};

convertLength.nanometer.foot = nm$foot = function(nm) {
  return nm / 3048e+5; // Nanometer to Foot
};

convertLength.nanometer.yard = nm$yard = function(nm) {
  return nm / 9144e+5; // Nanometer to Yard
};

convertLength.nanometer.mile = nm$mile = function(nm) {
  return nm / 1609e+9; // Nanometer to Mile
};

/* Micrometer Conversions */
convertLength.micrometer.nanometer = um$nm = function(um) {
  return um * 1e+3; // Micrometer to Nanometer
};

convertLength.micrometer.micrometer = um$um = function(um) {
  return um; // Micrometer to Micrometer
};

convertLength.micrometer.millimeter = um$mm = function(um) {
  return um / 1e+3; // Micrometer to Millimeter
};

convertLength.micrometer.centimeter = um$cm = function(um) {
  return um / 1e+4; // Micrometer to Centimeter
};

convertLength.micrometer.decimeter = um$dm = function(um) {
  return um / 1e+5; // Micrometer to Decimeter
};

convertLength.micrometer.meter = um$m = function(um) {
  return um / 1e+6; // Micrometer to Meter
};

convertLength.micrometer.decameter = um$dam = function(um) {
  return um / 1e+7; // Micrometer to Decameter
};

convertLength.micrometer.hectometer = um$hm = function(um) {
  return um / 1e+8; // Micrometer to Hectometer
};

convertLength.micrometer.kilometer = um$km = function(um) {
  return um / 1e+9; // Micrometer to Kilometer
};

convertLength.micrometer.inch = um$inch = function(um) {
  return um / 254e+2; // Micrometer to Inch
};

convertLength.micrometer.foot = um$foot = function(um) {
  return um / 3048e+2; // Micrometer to Foot
};

convertLength.micrometer.yard = um$yard = function(um) {
  return um / 9144e+2; // Micrometer to Yard
};

convertLength.micrometer.mile = um$mile = function(um) {
  return um / 1609e+6; // Micrometer to Mile
};

/* Millimeter Conversions */
convertLength.millimeter.nanometer = mm$nm = function(mm) {
  return mm * 1e+6; // Millimeter to Nanometer
};

convertLength.millimeter.micrometer = mm$um = function(mm) {
  return mm * 1e+3; // Millimeter to Micrometer
};

convertLength.millimeter.millimeter = mm$mm = function(mm) {
  return mm; // Millimeter to Millimeter
};

convertLength.millimeter.centimeter = mm$cm = function(mm) {
  return mm / 1e+1; // Millimeter to Centimeter
};

convertLength.millimeter.decimeter = mm$dm = function(mm) {
  return mm / 1e+2; // Millimeter to Decimeter
};

convertLength.millimeter.meter = mm$m = function(mm) {
  return mm / 1e+3; // Millimeter to Meter
};

convertLength.millimeter.decameter = mm$dam = function(mm) {
  return mm / 1e+4; // Millimeter to Decameter
};

convertLength.millimeter.hectometer = mm$hm = function(mm) {
  return mm / 1e+5; // Millimeter to Hectometer
};

convertLength.millimeter.kilometer = mm$km = function(mm) {
  return mm / 1e+6; // Millimeter to Kilometer
};

convertLength.millimeter.inch = mm$inch = function(mm) {
  return mm / 25.4; // Millimeter to Inch
};

convertLength.millimeter.foot = mm$foot = function(mm) {
  return mm / 304.8; // Millimeter to Foot
};

convertLength.millimeter.yard = mm$yard = function(mm) {
  return mm / 914.4; // Millimeter to Yard
};

convertLength.millimeter.mile = mm$mile = function(mm) {
  return mm / 1609e+3; // Millimeter to Mile
};

/* Centimeter Conversions */
convertLength.centimeter.nanometer = cm$nm = function(cm) {
  return cm * 1e+7; // Centimeter to Nanometer
};

convertLength.centimeter.micrometer = cm$um = function(cm) {
  return cm * 1e+4; // Centimeter to Micrometer
};

convertLength.centimeter.millimeter = cm$mm = function(cm) {
  return cm * 1e+1; // Centimeter to Millimeter
};

convertLength.centimeter.centimeter = cm$cm = function(cm) {
  return cm; // Centimeter to Centimeter
};

convertLength.centimeter.decimeter = cm$dm = function(cm) {
  return cm / 1e+1; // Centimeter to Decimeter
};

convertLength.centimeter.meter = cm$m = function(cm) {
  return cm / 1e+2; // Centimeter to Meter
};

convertLength.centimeter.decameter = cm$dam = function(cm) {
  return cm / 1e+3; // Centimeter to Decameter
};

convertLength.centimeter.hectometer = cm$hm = function(cm) {
  return cm / 1e+4; // Centimeter to Hectometer
};

convertLength.centimeter.kilometer = cm$km = function(cm) {
  return cm / 1e+5; // Centimeter to Kilometer
};

convertLength.centimeter.inch = cm$inch = function(cm) {
  return cm / 2.54; // Centimeter to Inch
};

convertLength.centimeter.foot = cm$foot = function(cm) {
  return cm / 30.48; // Centimeter to Foot
};

convertLength.centimeter.yard = cm$yard = function(cm) {
  return cm / 91.44; // Centimeter to Yard
};

convertLength.centimeter.mile = cm$mile = function(cm) {
  return cm / 1609e+2; // Centimeter to Mile
};

/* Decimeter Conversions */
convertLength.decimeter.nanometer = dm$nm = function(dm) {
  return dm * 1e+8; // Decimeter to Nanometer
};

convertLength.decimeter.micrometer = dm$um = function(dm) {
  return dm * 1e+5; // Decimeter to Micrometer
};

convertLength.decimeter.millimeter = dm$mm = function(dm) {
  return dm * 1e+2; // Decimeter to Millimeter
};

convertLength.decimeter.centimeter = dm$cm = function(dm) {
  return dm * 1e+1; // Decimeter to Centimeter
};

convertLength.decimeter.decimeter = dm$dm = function(dm) {
  return dm; // Decimeter to Decimeter
};

convertLength.decimeter.meter = dm$m = function(dm) {
  return dm / 1e+1; // Decimeter to Meter
};

convertLength.decimeter.decameter = dm$dam = function(dm) {
  return dm / 1e+2; // Decimeter to Decameter
};

convertLength.decimeter.hectometer = dm$hm = function(dm) {
  return dm / 1e+3; // Decimeter to Hectometer
};

convertLength.decimeter.kilometer = dm$km = function(dm) {
  return dm / 1e+4; // Decimeter to Kilometer
};

convertLength.decimeter.inch = dm$inch = function(dm) {
  return dm * 3.937; // Decimeter to Inch
};

convertLength.decimeter.foot = dm$foot = function(dm) {
  return dm / 3.048; // Decimeter to Foot
};

convertLength.decimeter.yard = dm$yard = function(dm) {
  return dm / 9.144; // Decimeter to Yard
};

convertLength.decimeter.mile = dm$mile = function(dm) {
  return dm / 1609e+1; // Decimeter to Mile
};

/* Meter Conversions */
convertLength.meter.nanometer = m$nm = function(m) {
  return m * 1e+9; // Meter to Nanometer
};

convertLength.meter.micrometer = m$um = function(m) {
  return m * 1e+6; // Meter to Micrometer
};

convertLength.meter.millimeter = m$mm = function(m) {
  return m * 1e+3; // Meter to Millimeter
};

convertLength.meter.centimeter = m$cm = function(m) {
  return m * 1e+2; // Meter to Centimeter
};

convertLength.meter.decimeter = m$dm = function(m) {
  return m * 1e+1; // Meter to Decimeter
};

convertLength.meter.meter = m$m = function(m) {
  return m; // Meter to Meter
};

convertLength.meter.decameter = m$dam = function(m) {
  return m / 1e+1; // Meter to Decameter
};

convertLength.meter.hectometer = m$hm = function(m) {
  return m / 1e+2; // Meter to Hectometer
};

convertLength.meter.kilometer = m$km = function(m) {
  return m / 1e+3; // Meter to Kilometer
};

convertLength.meter.inch = m$inch = function(m) {
  return m * 39.37; // Meter to Inch
};

convertLength.meter.foot = m$foot = function(m) {
  return m * 3.281; // Meter to Foot
};

convertLength.meter.yard = m$yard = function(m) {
  return m * 1.094; // Meter to Yard
};

convertLength.meter.mile = m$mile = function(m) {
  return m / 1609; // Meter to Mile
};

/* Decameter Conversions */
convertLength.decameter.nanometer = dam$nm = function(dam) {
  return dam * 1e+10; // Decameter to Nanometer
};

convertLength.decameter.micrometer = dam$um = function(dam) {
  return dam * 1e+7; // Decameter to Micrometer
};

convertLength.decameter.millimeter = dam$mm = function(dam) {
  return dam * 1e+4; // Decameter to Millimeter
};

convertLength.decameter.centimeter = dam$cm = function(dam) {
  return dam * 1e+3; // Decameter to Centimeter
};

convertLength.decameter.decimeter = dam$dm = function(dam) {
  return dam * 1e+2; // Decameter to Decimeter
};

convertLength.decameter.meter = dam$m = function(dam) {
  return dam * 1e+1; // Decameter to Meter
};

convertLength.decameter.decameter = dam$dam = function(dam) {
  return dam; // Decameter to Decameter
};

convertLength.decameter.hectometer = dam$hm = function(dam) {
  return dam / 1e+1; // Decameter to Hectometer
};

convertLength.decameter.kilometer = dam$km = function(dam) {
  return dam / 1e+2; // Decameter to Kilometer
};

convertLength.decameter.inch = dam$inch = function(dam) {
  return dam * 393.7; // Decameter to Inch
};

convertLength.decameter.foot = dam$foot = function(dam) {
  return dam * 32.81; // Decameter to Foot
};

convertLength.decameter.yard = dam$yard = function(dam) {
  return dam * 10.94; // Decameter to Yard
};

convertLength.decameter.mile = dam$mile = function(dam) {
  return dam / 160.9; // Decameter to Mile
};

/* Hectometer Conversions */
convertLength.hectometer.nanometer = hm$nm = function(hm) {
  return hm * 1e+11; // Hectometer to Nanometer
};

convertLength.hectometer.micrometer = hm$um = function(hm) {
  return hm * 1e+8; // Hectometer to Micrometer
};

convertLength.hectometer.millimeter = hm$mm = function(hm) {
  return hm * 1e+5; // Hectometer to Millimeter
};

convertLength.hectometer.centimeter = hm$cm = function(hm) {
  return hm * 1e+4; // Hectometer to Centimeter
};

convertLength.hectometer.decimeter = hm$dm = function(hm) {
  return hm * 1e+3; // Hectometer to Decimeter
};

convertLength.hectometer.meter = hm$m = function(hm) {
  return hm * 1e+2; // Hectometer to Meter
};

convertLength.hectometer.decameter = hm$dam = function(hm) {
  return hm * 1e+1; // Hectometer to Decameter
};

convertLength.hectometer.hectometer = hm$hm = function(hm) {
  return hm; // Hectometer to Hectometer
};

convertLength.hectometer.kilometer = hm$km = function(hm) {
  return hm / 1e+1; // Hectometer to Kilometer
};

convertLength.hectometer.inch = hm$inch = function(hm) {
  return hm * 3937; // Hectometer to Inch
};

convertLength.hectometer.foot = hm$foot = function(hm) {
  return hm * 328.1; // Hectometer to Foot
};

convertLength.hectometer.yard = hm$yard = function(hm) {
  return hm * 109.4; // Hectometer to Yard
};

convertLength.hectometer.mile = hm$mile = function(hm) {
  return hm / 16.09; // Hectometer to Mile
};

/* Kilometer Conversions */
convertLength.kilometer.nanometer = km$nm = function(km) {
  return km * 1e+12; // Kilometer to Nanometer
};

convertLength.kilometer.micrometer = km$um = function(km) {
  return km * 1e+9; // Kilometer to Micrometer
};

convertLength.kilometer.millimeter = km$mm = function(km) {
  return km * 1e+6; // Kilometer to Millimeter
};

convertLength.kilometer.centimeter = km$cm = function(km) {
  return km * 1e+5; // Kilometer to Centimeter
};

convertLength.kilometer.decimeter = km$dm = function(km) {
  return km * 1e+4; // Kilometer to Decimeter
};

convertLength.kilometer.meter = km$m = function(km) {
  return km * 1e+3; // Kilometer to Meter
};

convertLength.kilometer.decameter = km$dam = function(km) {
  return km * 1e+2; // Kilometer to Decameter
};

convertLength.kilometer.hectometer = km$hm = function(km) {
  return km * 1e+1; // Kilometer to Hectometer
};

convertLength.kilometer.kilometer = km$km = function(km) {
  return km; // Kilometer to Kilometer
};

convertLength.kilometer.inch = km$inch = function(km) {
  return km * 3937e+1; // Kilometer to Inch
};

convertLength.kilometer.foot = km$foot = function(km) {
  return km * 3281; // Kilometer to Foot
};

convertLength.kilometer.yard = km$yard = function(km) {
  return km * 1094; // Kilometer to Yard
};

convertLength.kilometer.mile = km$mile = function(km) {
  return km / 1.609; // Kilometer to Mile
};

/* Inch Conversions */
convertLength.inch.nanometer = inch$nm = function(inch) {
  return inch * 254e+5; // Inch to Nanometer
};

convertLength.inch.micrometer = inch$um = function(inch) {
  return inch * 254e+2; // Inch to Micrometer
};

convertLength.inch.millimeter = inch$mm = function(inch) {
  return inch * 25.4; // Inch to Millimeter
};

convertLength.inch.centimeter = inch$cm = function(inch) {
  return inch * 2.54; // Inch to Centimeter
};

convertLength.inch.decimeter = inch$dm = function(inch) {
  return inch / 3.937; // Inch to Decimeter
};

convertLength.inch.meter = inch$m = function(inch) {
  return inch / 39.37; // Inch to Meter
};

convertLength.inch.decameter = inch$dam = function(inch) {
  return inch / 393.7; // Inch to Decameter
};

convertLength.inch.hectometer = inch$hm = function(inch) {
  return inch / 3937; // Inch to Hectometer
};

convertLength.inch.kilometer = inch$km = function(inch) {
  return inch / 3937e+1; // Inch to Kilometer
};

convertLength.inch.inch = inch$inch = function(inch) {
  return inch; // Inch to Inch
};

convertLength.inch.foot = inch$foot = function(inch) {
  return inch / 12; // Inch to Foot
};

convertLength.inch.yard = inch$yard = function(inch) {
  return inch / 36; // Inch to Yard
};

convertLength.inch.mile = inch$mile = function(inch) {
  return inch / 63360; // Inch to Mile
};

/* Foot Conversions */
convertLength.foot.nanometer = foot$nm = function(foot) {
  return foot * 3048e+5; // Foot to Nanometer
};

convertLength.foot.micrometer = foot$um = function(foot) {
  return foot * 3048e+2; // Foot to Micrometer
};

convertLength.foot.millimeter = foot$mm = function(foot) {
  return foot * 304.8; // Foot to Millimeter
};

convertLength.foot.centimeter = foot$cm = function(foot) {
  return foot * 30.48; // Foot to Centimeter
};

convertLength.foot.decimeter = foot$dm = function(foot) {
  return foot * 3.048; // Foot to Decimeter
};

convertLength.foot.meter = foot$m = function(foot) {
  return foot / 3.281; // Foot to Meter
};

convertLength.foot.decameter = foot$dam = function(foot) {
  return foot / 32.81; // Foot to Decameter
};

convertLength.foot.hectometer = foot$hm = function(foot) {
  return foot / 328.1; // Foot to Hectometer
};

convertLength.foot.kilometer = foot$km = function(foot) {
  return foot / 3281; // Foot to Kilometer
};

convertLength.foot.inch = foot$inch = function(foot) {
  return foot * 12; // Foot to Inch
};

convertLength.foot.foot = foot$foot = function(foot) {
  return foot; // Foot to Foot
};

convertLength.foot.yard = foot$yard = function(foot) {
  return foot / 3; // Foot to Yard
};

convertLength.foot.mile = foot$mile = function(foot) {
  return foot / 5280; // Foot to Mile
};

/* Yard Conversions */
convertLength.yard.nanometer = yard$nm = function(yard) {
  return yard * 9144e+5; // Yard to Nanometer
};

convertLength.yard.micrometer = yard$um = function(yard) {
  return yard * 9144e+2; // Yard to Micrometer
};

convertLength.yard.millimeter = yard$mm = function(yard) {
  return yard * 914.4; // Yard to Millimeter
};

convertLength.yard.centimeter = yard$cm = function(yard) {
  return yard * 91.44; // Yard to Centimeter
};

convertLength.yard.decimeter = yard$dm = function(yard) {
  return yard * 9.144; // Yard to Decimeter
};

convertLength.yard.meter = yard$m = function(yard) {
  return yard / 1.094; // Yard to Meter
};

convertLength.yard.decameter = yard$dam = function(yard) {
  return yard / 10.94; // Yard to Decameter
};

convertLength.yard.hectometer = yard$hm = function(yard) {
  return yard / 109.4; // Yard to Hectometer
};

convertLength.yard.kilometer = yard$km = function(yard) {
  return yard / 1094; // Yard to Kilometer
};

convertLength.yard.inch = yard$inch = function(yard) {
  return yard * 36; // Yard to Inch
};

convertLength.yard.foot = yard$foot = function(yard) {
  return yard * 3; // Yard to Foot
};

convertLength.yard.yard = yard$yard = function(yard) {
  return yard; // Yard to Yard
};

convertLength.yard.mile = yard$mile = function(yard) {
  return yard / 1760; // Yard to Mile
};

/* Mile Conversions */
convertLength.mile.nanometer = mile$nm = function(mile) {
  return mile * 1609e+9; // Mile to Nanometer
};

convertLength.mile.micrometer = mile$um = function(mile) {
  return mile * 1609e+6; // Mile to Micrometer
};

convertLength.mile.millimeter = mile$mm = function(mile) {
  return mile * 1609e+3; // Mile to Millimeter
};

convertLength.mile.centimeter = mile$cm = function(mile) {
  return mile * 1609e+2; // Mile to Centimeter
};

convertLength.mile.decimeter = mile$dm = function(mile) {
  return mile * 1609e+1; // Mile to Decimeter
};

convertLength.mile.meter = mile$m = function(mile) {
  return mile * 1609; // Mile to Meter
};

convertLength.mile.decameter = mile$dam = function(mile) {
  return mile * 160.9; // Mile to Decameter
};

convertLength.mile.hectometer = mile$hm = function(mile) {
  return mile * 16.09; // Mile to Hectometer
};

convertLength.mile.kilometer = mile$km = function(mile) {
  return mile * 1.609; // Mile to Kilometer
};

convertLength.mile.inch = mile$inch = function(mile) {
  return mile * 63360; // Mile to Inch
};

convertLength.mile.foot = mile$foot = function(mile) {
  return mile * 5280; // Mile to Foot
};

convertLength.mile.yard = mile$yard = function(mile) {
  return mile * 1760; // Mile to Yard
};

convertLength.mile.mile = mile$mile = function(mile) {
  return mile; // Mile to Mile
};

convertMass = {
  nanogram: {},
  microgram: {},
  milligram: {},
  centigram: {},
  decigram: {},
  gram: {},
  decagram: {},
  hectogram: {},
  kilogram: {},
  ounce: {},
  pound: {},
  stone: {},
  ton: {}
};

/* Nanogram Conversions */
convertMass.nanogram.nanogram = ng$ng = function(ng) {
  return ng; // Nanogram to Nanogram
};

convertMass.nanogram.microgram = ng$ug = function(ng) {
  return ng / 1e+3; // Nanogram to Microgram
};

convertMass.nanogram.milligram = ng$mg = function(ng) {
  return ng / 1e+6; // Nanogram to Milligram
};

convertMass.nanogram.centigram = ng$cg = function(ng) {
  return ng / 1e+7; // Nanogram to Centigram
};

convertMass.nanogram.decigram = ng$dg = function(ng) {
  return ng / 1e+8; // Nanogram to Decigram
};

convertMass.nanogram.gram = ng$g = function(ng) {
  return ng / 1e+9; // Nanogram to Gram
};

convertMass.nanogram.decagram = ng$dag = function(ng) {
  return ng / 1e+10; // Nanogram to Decagram
};

convertMass.nanogram.hectogram = ng$hg = function(ng) {
  return ng / 1e+11; // Nanogram to Hectogram
};

convertMass.nanogram.kilogram = ng$kg = function(ng) {
  return ng / 1e+12; // Nanogram to Kilogram
};

convertMass.nanogram.ounce = ng$oz = function(ng) {
  return ng / 2835e+7; // Nanogram to Ounce
};

convertMass.nanogram.pound = ng$lb = function(ng) {
  return ng / 4536e+8; // Nanogram to Pound
};

convertMass.nanogram.stone = ng$st = function(ng) {
  return ng / 635e+10; // Nanogram to Stone
};

convertMass.nanogram.ton = ng$t = function(ng) {
  return ng / 9072e+11; // Nanogram to Ton
};

/* Microgram Conversions */
convertMass.microgram.nanogram = ug$ng = function(ug) {
  return ug * 1e+3; // Microgram to Nanogram
};

convertMass.microgram.microgram = ug$ug = function(ug) {
  return ug; // Microgram to Microgram
};

convertMass.microgram.milligram = ug$mg = function(ug) {
  return ug / 1e+3; // Microgram to Milligram
};

convertMass.microgram.centigram = ug$cg = function(ug) {
  return ug / 1e+4; // Microgram to Centigram
};

convertMass.microgram.decigram = ug$dg = function(ug) {
  return ug / 1e+5; // Microgram to Decigram
};

convertMass.microgram.gram = ug$g = function(ug) {
  return ug / 1e+6; // Microgram to Gram
};

convertMass.microgram.decagram = ug$dag = function(ug) {
  return ug / 1e+7; // Microgram to Decagram
};

convertMass.microgram.hectogram = ug$hg = function(ug) {
  return ug / 1e+8; // Microgram to Hectogram
};

convertMass.microgram.kilogram = ug$kg = function(ug) {
  return ug / 1e+9; // Microgram to Kilogram
};

convertMass.microgram.ounce = ug$oz = function(ug) {
  return ug / 2835e+4; // Microgram to Ounce
};

convertMass.microgram.pound = ug$lb = function(ug) {
  return ug / 4536e+5; // Microgram to Pound
};

convertMass.microgram.stone = ug$st = function(ug) {
  return ug / 635e+7; // Microgram to Stone
};

convertMass.microgram.ton = ug$t = function(ug) {
  return ug / 9072e+8; // Microgram to Ton
};

/* Milligram Conversions */
convertMass.milligram.nanogram = mg$ng = function(mg) {
  return mg * 1e+6; // Milligram to Nanogram
};

convertMass.milligram.microgram = mg$ug = function(mg) {
  return mg * 1e+3; // Milligram to Microgram
};

convertMass.milligram.milligram = mg$mg = function(mg) {
  return mg; // Milligram to Milligram
};

convertMass.milligram.centigram = mg$cg = function(mg) {
  return mg / 1e+1; // Milligram to Centigram
};

convertMass.milligram.decigram = mg$dg = function(mg) {
  return mg / 1e+2; // Milligram to Decigram
};

convertMass.milligram.gram = mg$g = function(mg) {
  return mg / 1e+3; // Milligram to Gram
};

convertMass.milligram.decagram = mg$dag = function(mg) {
  return mg / 1e+4; // Milligram to Decagram
};

convertMass.milligram.hectogram = mg$hg = function(mg) {
  return mg / 1e+5; // Milligram to Hectogram
};

convertMass.milligram.kilogram = mg$kg = function(mg) {
  return mg / 1e+6; // Milligram to Kilogram
};

convertMass.milligram.ounce = mg$oz = function(mg) {
  return mg / 2835e+1; // Milligram to Ounce
};

convertMass.milligram.pound = mg$lb = function(mg) {
  return mg / 4536e+2; // Milligram to Pound
};

convertMass.milligram.stone = mg$st = function(mg) {
  return mg / 635e+4; // Milligram to Stone
};

convertMass.milligram.ton = mg$t = function(mg) {
  return mg / 9072e+5; // Milligram to Ton
};

/* Centigram Conversions */
convertMass.centigram.nanogram = cg$ng = function(cg) {
  return cg * 1e+7; // Centigram to Nanogram
};

convertMass.centigram.microgram = cg$ug = function(cg) {
  return cg * 1e+4; // Centigram to Microgram
};

convertMass.centigram.milligram = cg$mg = function(cg) {
  return cg * 1e+1; // Centigram to Milligram
};

convertMass.centigram.centigram = cg$cg = function(cg) {
  return cg; // Centigram to Centigram
};

convertMass.centigram.decigram = cg$dg = function(cg) {
  return cg / 1e+1; // Centigram to Decigram
};

convertMass.centigram.gram = cg$g = function(cg) {
  return cg / 1e+2; // Centigram to Gram
};

convertMass.centigram.decagram = cg$dag = function(cg) {
  return cg / 1e+3; // Centigram to Decagram
};

convertMass.centigram.hectogram = cg$hg = function(cg) {
  return cg / 1e+4; // Centigram to Hectogram
};

convertMass.centigram.kilogram = cg$kg = function(cg) {
  return cg / 1e+5; // Centigram to Kilogram
};

convertMass.centigram.ounce = cg$oz = function(cg) {
  return cg / 2835; // Centigram to Ounce
};

convertMass.centigram.pound = cg$lb = function(cg) {
  return cg / 4536e+1; // Centigram to Pound
};

convertMass.centigram.stone = cg$st = function(cg) {
  return cg / 635e+3; // Centigram to Stone
};

convertMass.centigram.ton = cg$t = function(cg) {
  return cg / 9072e+4; // Centigram to Ton
};

/* Decigram Conversions */
convertMass.decigram.nanogram = dg$ng = function(dg) {
  return dg * 1e+8; // Decigram to Nanogram
};

convertMass.decigram.microgram = dg$ug = function(dg) {
  return dg * 1e+5; // Decigram to Microgram
};

convertMass.decigram.milligram = dg$mg = function(dg) {
  return dg * 1e+2; // Decigram to Milligram
};

convertMass.decigram.centigram = dg$cg = function(dg) {
  return dg * 1e+1; // Decigram to Centigram
};

convertMass.decigram.decigram = dg$dg = function(dg) {
  return dg; // Decigram to Decigram
};

convertMass.decigram.gram = dg$g = function(dg) {
  return dg / 1e+1; // Decigram to Gram
};

convertMass.decigram.decagram = dg$dag = function(dg) {
  return dg / 1e+2; // Decigram to Decagram
};

convertMass.decigram.hectogram = dg$hg = function(dg) {
  return dg / 1e+3; // Decigram to Hectogram
};

convertMass.decigram.kilogram = dg$kg = function(dg) {
  return dg / 1e+4; // Decigram to Kilogram
};

convertMass.decigram.ounce = dg$oz = function(dg) {
  return dg / 283.5; // Decigram to Ounce
};

convertMass.decigram.pound = dg$lb = function(dg) {
  return dg / 4536; // Decigram to Pound
};

convertMass.decigram.stone = dg$st = function(dg) {
  return dg / 635e+2; // Decigram to Stone
};

convertMass.decigram.ton = dg$t = function(dg) {
  return dg / 9072e+3; // Decigram to Ton
};

/* Gram Conversions */
convertMass.gram.nanogram = g$ng = function(g) {
  return g * 1e+9; // Gram to Nanogram
};

convertMass.gram.microgram = g$ug = function(g) {
  return g * 1e+6; // Gram to Microgram
};

convertMass.gram.milligram = g$mg = function(g) {
  return g * 1e+3; // Gram to Milligram
};

convertMass.gram.centigram = g$cg = function(g) {
  return g * 1e+2; // Gram to Centigram
};

convertMass.gram.decigram = g$dg = function(g) {
  return g * 1e+1; // Gram to Decigram
};

convertMass.gram.gram = g$g = function(g) {
  return g; // Gram to Gram
};

convertMass.gram.decagram = g$dag = function(g) {
  return g / 1e+1; // Gram to Decagram
};

convertMass.gram.hectogram = g$hg = function(g) {
  return g / 1e+2; // Gram to Hectogram
};

convertMass.gram.kilogram = g$kg = function(g) {
  return g / 1e+3; // Gram to Kilogram
};

convertMass.gram.ounce = g$oz = function(g) {
  return g / 28.35; // Gram to Ounce
};

convertMass.gram.pound = g$lb = function(g) {
  return g / 453.6; // Gram to Pound
};

convertMass.gram.stone = g$st = function(g) {
  return g / 635e+1; // Gram to Stone
};

convertMass.gram.ton = g$t = function(g) {
  return g / 9072e+2; // Gram to Ton
};

/* Decagram Conversions */
convertMass.decagram.nanogram = dag$ng = function(dag) {
  return dag * 1e+10; // Decagram to Nanogram
};

convertMass.decagram.microgram = dag$ug = function(dag) {
  return dag * 1e+7; // Decagram to Microgram
};

convertMass.decagram.milligram = dag$mg = function(dag) {
  return dag * 1e+4; // Decagram to Milligram
};

convertMass.decagram.centigram = dag$cg = function(dag) {
  return dag * 1e+3; // Decagram to Centigram
};

convertMass.decagram.decigram = dag$dg = function(dag) {
  return dag * 1e+2; // Decagram to Decigram
};

convertMass.decagram.gram = dag$g = function(dag) {
  return dag * 1e+1; // Decagram to Gram
};

convertMass.decagram.decagram = dag$dag = function(dag) {
  return dag; // Decagram to Decagram
};

convertMass.decagram.hectogram = dag$hg = function(dag) {
  return dag / 1e+1; // Decagram to Hectogram
};

convertMass.decagram.kilogram = dag$kg = function(dag) {
  return dag / 1e+2; // Decagram to Kilogram
};

convertMass.decagram.ounce = dag$oz = function(dag) {
  return dag / 2.835; // Decagram to Ounce
};

convertMass.decagram.pound = dag$lb = function(dag) {
  return dag / 45.36; // Decagram to Pound
};

convertMass.decagram.stone = dag$st = function(dag) {
  return dag / 635; // Decagram to Stone
};

convertMass.decagram.ton = dag$t = function(dag) {
  return dag / 9072e+1; // Decagram to Ton
};

/* Hectogram Conversions */
convertMass.hectogram.nanogram = hg$ng = function(hg) {
  return hg * 1e+11; // Hectogram to Nanogram
};

convertMass.hectogram.microgram = hg$ug = function(hg) {
  return hg * 1e+8; // Hectogram to Microgram
};

convertMass.hectogram.milligram = hg$mg = function(hg) {
  return hg * 1e+5; // Hectogram to Milligram
};

convertMass.hectogram.centigram = hg$cg = function(hg) {
  return hg * 1e+4; // Hectogram to Centigram
};

convertMass.hectogram.decigram = hg$dg = function(hg) {
  return hg * 1e+3; // Hectogram to Decigram
};

convertMass.hectogram.gram = hg$g = function(hg) {
  return hg * 1e+2; // Hectogram to Gram
};

convertMass.hectogram.decagram = hg$dag = function(hg) {
  return hg * 1e+1; // Hectogram to Decagram
};

convertMass.hectogram.hectogram = hg$hg = function(hg) {
  return hg; // Hectogram to Hectogram
};

convertMass.hectogram.kilogram = hg$kg = function(hg) {
  return hg / 1e+1; // Hectogram to Kilogram
};

convertMass.hectogram.ounce = hg$oz = function(hg) {
  return hg * 3.5274; // Hectogram to Ounce
};

convertMass.hectogram.pound = hg$lb = function(hg) {
  return hg / 4.536; // Hectogram to Pound
};

convertMass.hectogram.stone = hg$st = function(hg) {
  return hg / 63.5; // Hectogram to Stone
};

convertMass.hectogram.ton = hg$t = function(hg) {
  return hg / 9072; // Hectogram to Ton
};

/* Kilogram Conversions */
convertMass.kilogram.nanogram = kg$ng = function(kg) {
  return kg * 1e+12; // Kilogram to Nanogram
};

convertMass.kilogram.microgram = kg$ug = function(kg) {
  return kg * 1e+9; // Kilogram to Microgram
};

convertMass.kilogram.milligram = kg$mg = function(kg) {
  return kg * 1e+6; // Kilogram to Milligram
};

convertMass.kilogram.centigram = kg$cg = function(kg) {
  return kg * 1e+5; // Kilogram to Centigram
};

convertMass.kilogram.decigram = kg$dg = function(kg) {
  return kg * 1e+4; // Kilogram to Decigram
};

convertMass.kilogram.gram = kg$g = function(kg) {
  return kg * 1e+3; // Kilogram to Gram
};

convertMass.kilogram.decagram = kg$dag = function(kg) {
  return kg * 1e+2; // Kilogram to Decagram
};

convertMass.kilogram.hectogram = kg$hg = function(kg) {
  return kg * 1e+1; // Kilogram to Hectogram
};

convertMass.kilogram.kilogram = kg$kg = function(kg) {
  return kg; // Kilogram to Kilogram
};

convertMass.kilogram.ounce = kg$oz = function(kg) {
  return kg * 35.274; // Kilogram to Ounce
};

convertMass.kilogram.pound = kg$lb = function(kg) {
  return kg * 2.205; // Kilogram to Pound
};

convertMass.kilogram.stone = kg$st = function(kg) {
  return kg / 6.35; // Kilogram to Stone
};

convertMass.kilogram.ton = kg$t = function(kg) {
  return kg / 907.2; // Kilogram to Ton
};

/* Ounce Conversions */
convertMass.ounce.nanogram = oz$ng = function(oz) {
  return oz * 2835e+7; // Ounce to Nanogram
};

convertMass.ounce.microgram = oz$ug = function(oz) {
  return oz * 2835e+4; // Ounce to Microgram
};

convertMass.ounce.milligram = oz$mg = function(oz) {
  return oz * 2835e+1; // Ounce to Milligram
};

convertMass.ounce.centigram = oz$cg = function(oz) {
  return oz * 2835; // Ounce to Centigram
};

convertMass.ounce.decigram = oz$dg = function(oz) {
  return oz * 283.5; // Ounce to Decigram
};

convertMass.ounce.gram = oz$g = function(oz) {
  return oz * 28.35; // Ounce to Gram
};

convertMass.ounce.decagram = oz$dag = function(oz) {
  return oz * 2.835; // Ounce to Decagram
};

convertMass.ounce.hectogram = oz$hg = function(oz) {
  return oz / 3.5274; // Ounce to Hectogram
};

convertMass.ounce.kilogram = oz$kg = function(oz) {
  return oz / 35.274; // Ounce to Kilogram
};

convertMass.ounce.ounce = oz$oz = function(oz) {
  return oz; // Ounce to Ounce
};

convertMass.ounce.pound = oz$lb = function(oz) {
  return oz / 16; // Ounce to Pound
};

convertMass.ounce.stone = oz$st = function(oz) {
  return oz / 224; // Ounce to Stone
};

convertMass.ounce.ton = oz$t = function(oz) {
  return oz / 32e+3; // Ounce to Ton
};

/* Pound Conversions */
convertMass.pound.nanogram = lb$ng = function(lb) {
  return lb * 4536e+8; // Pound to Nanogram
};

convertMass.pound.microgram = lb$ug = function(lb) {
  return lb * 4536e+5; // Pound to Microgram
};

convertMass.pound.milligram = lb$mg = function(lb) {
  return lb * 4536e+2; // Pound to Milligram
};

convertMass.pound.centigram = lb$cg = function(lb) {
  return lb * 4536e+1; // Pound to Centigram
};

convertMass.pound.decigram = lb$dg = function(lb) {
  return lb * 4536; // Pound to Decigram
};

convertMass.pound.gram = lb$g = function(lb) {
  return lb * 453.6; // Pound to Gram
};

convertMass.pound.decagram = lb$dag = function(lb) {
  return lb * 45.36; // Pound to Decagram
};

convertMass.pound.hectogram = lb$hg = function(lb) {
  return lb * 4.536; // Pound to Hectogram
};

convertMass.pound.kilogram = lb$kg = function(lb) {
  return lb / 2.205; // Pound to Kilogram
};

convertMass.pound.ounce = lb$oz = function(lb) {
  return lb * 16; // Pound to Ounce
};

convertMass.pound.pound = lb$lb = function(lb) {
  return lb; // Pound to Pound
};

convertMass.pound.stone = lb$st = function(lb) {
  return lb / 14; // Pound to Stone
};

convertMass.pound.ton = lb$t = function(lb) {
  return lb / 2205; // Pound to Ton
};

/* Stone Conversions */
convertMass.stone.nanogram = st$ng = function(st) {
  return st * 635e+10; // Stone to Nanogram
};

convertMass.stone.microgram = st$ug = function(st) {
  return st * 635e+7; // Stone to Microgram
};

convertMass.stone.milligram = st$mg = function(st) {
  return st * 635e+4; // Stone to Milligram
};

convertMass.stone.centigram = st$cg = function(st) {
  return st * 635e+3; // Stone to Centigram
};

convertMass.stone.decigram = st$dg = function(st) {
  return st * 635e+2; // Stone to Decigram
};

convertMass.stone.gram = st$g = function(st) {
  return st * 635e+1; // Stone to Gram
};

convertMass.stone.decagram = st$dag = function(st) {
  return st * 635; // Stone to Decagram
};

convertMass.stone.hectogram = st$hg = function(st) {
  return st * 63.5; // Stone to Hectogram
};

convertMass.stone.kilogram = st$kg = function(st) {
  return st * 6.35; // Stone to Kilogram
};

convertMass.stone.ounce = st$oz = function(st) {
  return st * 224; // Stone to Ounce
};

convertMass.stone.pound = st$lb = function(st) {
  return st * 14; // Stone to Pound
};

convertMass.stone.stone = st$st = function(st) {
  return st; // Stone to Stone
};

convertMass.stone.ton = st$t = function(st) {
  return st / 157.5; // Stone to Ton
};

/* Ton Conversions */
convertMass.ton.nanogram = t$ng = function(t) {
  return t * 9072e+11; // Ton to Nanogram
};

convertMass.ton.microgram = t$ug = function(t) {
  return t * 9072e+8; // Ton to Microgram
};

convertMass.ton.milligram = t$mg = function(t) {
  return t * 9072e+5; // Ton to Milligram
};

convertMass.ton.centigram = t$cg = function(t) {
  return t * 9072e+4; // Ton to Centigram
};

convertMass.ton.decigram = t$dg = function(t) {
  return t * 9072e+3; // Ton to Decigram
};

convertMass.ton.gram = t$g = function(t) {
  return t * 9072e+2; // Ton to Gram
};

convertMass.ton.decagram = t$dag = function(t) {
  return t * 9072e+1; // Ton to Decagram
};

convertMass.ton.hectogram = t$hg = function(t) {
  return t * 9072; // Ton to Hectogram
};

convertMass.ton.kilogram = t$kg = function(t) {
  return t * 907.2; // Ton to Kilogram
};

convertMass.ton.ounce = t$oz = function(t) {
  return t * 32e+3; // Ton to Ounce
};

convertMass.ton.pound = t$lb = function(t) {
  return t * 2205; // Ton to Pound
};

convertMass.ton.stone = t$st = function(t) {
  return t * 157.5; // Ton to Stone
};

convertMass.ton.ton = t$t = function(t) {
  return t; // Ton to Ton
};

convertPressure = {
  bar: {},
  pascal: {},
  standardAtmospheric: {},
  poundSquareInch: {},
  torr: {}
};

/* Bar Conversions */
convertPressure.bar.bar = bar$bar = function(bar) {
  return bar; // Bars to Bars
};

convertPressure.bar.pascal = bar$pas = function(bar) {
  return bar * 1e+5; // Bars to Pascals
};

convertPressure.bar.standardAtmospheric = bar$atm = function(bar) {
  return bar / 1.013; // Bars to Standard Atmospheric Pressure
};

convertPressure.bar.poundSquareInch = bar$psi = function(bar) {
  return bar * 14.504; // Bars to Pounds per Square Inch
};

convertPressure.bar.torr = bar$tor = function(bar) {
  return bar * 750.1; // Bars to Torrs
};

/* Pascal Conversions */
convertPressure.pascal.bar = pas$bar = function(pas) {
  return pas / 1e+5; // Pascals to Bars
};

convertPressure.pascal.pascal = pas$pas = function(pas) {
  return pas; // Pascals to Pascals
};

convertPressure.pascal.standardAtmospheric = pas$atm = function(pas) {
  return pas / 1013e+2; // Pascals to Standard Atmospheric Pressure
};

convertPressure.pascal.poundSquareInch = pas$psi = function(pas) {
  return pas / 6895; // Pascals to Pounds per Square Inch
};

convertPressure.pascal.torr = pas$tor = function(pas) {
  return pas / 133.3; // Pascals to Torrs
};

/* Standard Atmospheric Pressure Conversions */
convertPressure.standardAtmospheric.bar = atm$bar = function(atm) {
  return atm * 1.013; // Standard Atmospheric Pressure to Bars
};

convertPressure.standardAtmospheric.pascal = atm$pas = function(atm) {
  return atm * 1013e+2; // Standard Atmospheric Pressure to Pascals
};

convertPressure.standardAtmospheric.standardAtmospheric = atm$atm = function(atm) {
  return atm; // Standard Atmospheric Pressure to Standard Atmospheric Pressure
};

convertPressure.standardAtmospheric.poundSquareInch = atm$psi = function(atm) {
  return atm * 14.696; // Standard Atmospheric Pressure to Pounds per Square Inch
};

convertPressure.standardAtmospheric.torr = atm$tor = function(atm) {
  return atm * 76e+1; // Standard Atmospheric Pressure to Torrs
};

/* Pounds per Square Inch Conversions */
convertPressure.poundSquareInch.bar = psi$bar = function(psi) {
  return psi / 14.504; // Pounds per Square Inch to Bars
};

convertPressure.poundSquareInch.pascal = psi$pas = function(psi) {
  return psi * 6895; // Pounds per Square Inch to Pascals
};

convertPressure.poundSquareInch.standardAtmospheric = psi$atm = function(psi) {
  return psi / 14.696; // Pounds per Square Inch to Standard Atmospheric Pressure
};

convertPressure.poundSquareInch.poundSquareInch = psi$psi = function(psi) {
  return psi; // Pounds per Square Inch to Pounds per Square Inch
};

convertPressure.poundSquareInch.torr = psi$tor = function(psi) {
  return psi * 51.715; // Pounds per Square Inch to Torrs
};

/* Torr Conversions */
convertPressure.torr.bar = tor$bar = function(tor) {
  return tor / 750.1; // Torrs to Bars
};

convertPressure.torr.pascal = tor$pas = function(tor) {
  return tor * 133.3; // Torrs to Pascals
};

convertPressure.torr.standardAtmospheric = tor$atm = function(tor) {
  return tor / 76e+1; // Torrs to Standard Atmospheric Pressure
};

convertPressure.torr.poundSquareInch = tor$psi = function(tor) {
  return tor / 51.715; // Torrs to Pounds per Square Inch
};

convertPressure.torr.torr = tor$tor = function(tor) {
  return tor; // Torrs to Torrs
};

convertSpeed = {
  metersPerSecond: {},
  kilometersPerHour: {},
  feetPerSecond: {},
  milesPerHour: {},
  knots: {}
};

/* Meters Per Second Conversions */
convertSpeed.metersPerSecond.metersPerSecond = mps$mps = function(mps) {
  return mps; // Meters Per Second to Meters Per Second
};

convertSpeed.metersPerSecond.kilometersPerHour = mps$kph = function(mps) {
  return mps * 3.6; // Meters Per Second to Kilometers Per Hour
};

convertSpeed.metersPerSecond.feetPerSecond = mps$fps = function(mps) {
  return mps * 3.281; // Meters Per Second to Feet Per Second
};

convertSpeed.metersPerSecond.milesPerHour = mps$mph = function(mps) {
  return mps * 2.237; // Meters Per Second to Miles Per Hour
};

convertSpeed.metersPerSecond.knots = mps$kn = function(mps) {
  return mps * 1.944; // Meters Per Second to Knots
};

/* Kilometers Per Hour Conversions */
convertSpeed.kilometersPerHour.metersPerSecond = kph$mps = function(kph) {
  return kph / 3.6; // Kilometers Per Hour to Meters Per Second
};

convertSpeed.kilometersPerHour.kilometersPerHour = kph$kph = function(kph) {
  return kph; // Kilometers Per Hour to Kilometers Per Hour
};

convertSpeed.kilometersPerHour.feetPerSecond = kph$fps = function(kph) {
  return kph / 1.097; // Kilometers Per Hour to Feet Per Second
};

convertSpeed.kilometersPerHour.milesPerHour = kph$mph = function(kph) {
  return kph / 1.609; // Kilometers Per Hour to Miles Per Hour
};

convertSpeed.kilometersPerHour.knots = kph$kn = function(kph) {
  return kph / 1.852; // Kilometers Per Hour to Knots
};

/* Feet Per Second Conversions */
convertSpeed.feetPerSecond.metersPerSecond = fps$mps = function(fps) {
  return fps / 3.281; // Feet Per Second to Meters Per Second
};

convertSpeed.feetPerSecond.kilometersPerHour = fps$kph = function(fps) {
  return fps * 1.097; // Feet Per Second to Kilometers Per Hour
};

convertSpeed.feetPerSecond.feetPerSecond = fps$fps = function(fps) {
  return fps; // Feet Per Second to Feet Per Second
};

convertSpeed.feetPerSecond.milesPerHour = fps$mph = function(fps) {
  return fps / 1.467; // Feet Per Second to Miles Per Hour
};

convertSpeed.feetPerSecond.knots = fps$kn = function(fps) {
  return fps / 1.688; // Feet Per Second to Knots
};

/* Miles Per Hour Conversions */
convertSpeed.milesPerHour.metersPerSecond = mph$mps = function(mph) {
  return mph / 2.237; // Miles Per Hour to Meters Per Second
};

convertSpeed.milesPerHour.kilometersPerHour = mph$kph = function(mph) {
  return mph * 1.609; // Miles Per Hour to Kilometers Per Hour
};

convertSpeed.milesPerHour.feetPerSecond = mph$fps = function(mph) {
  return mph * 1.467; // Miles Per Hour to Feet Per Second
};

convertSpeed.milesPerHour.milesPerHour = mph$mph = function(mph) {
  return mph; // Miles Per Hour to Miles Per Hour
};

convertSpeed.milesPerHour.knots = mph$kn = function(mph) {
  return mph / 1.151; // Miles Per Hour to Knots
};

/* Knots Conversions */
convertSpeed.knots.metersPerSecond = kn$mps = function(kn) {
  return kn / 1.944; // Knots to Meters Per Second
};

convertSpeed.knots.kilometersPerHour = kn$kph = function(kn) {
  return kn * 1.852; // Knots to Kilometers Per Hour
};

convertSpeed.knots.feetPerSecond = kn$fps = function(kn) {
  return kn * 1.688; // Knots to Feet Per Second
};

convertSpeed.knots.milesPerHour = kn$mph = function(kn) {
  return kn * 1.151; // Knots to Miles Per Hour
};

convertSpeed.knots.knots = kn$kn = function(kn) {
  return kn; // Knots to Knots
};

convertTemperature = {
  celsius: {},
  fahrenheit: {},
  kelvin: {}
};

/* Celsius Conversions */
convertTemperature.celsius.celsius = c$c = function(c) {
  return c; // Celsius to Celsius
};

convertTemperature.celsius.fahrenheit = c$f = function(c) {
  return c * (9 / 5) + 32; // Celsius to Fahrenheit
};

convertTemperature.celsius.kelvin = c$k = function(c) {
  return c + 273.15; // Celsius to Kelvin
};

/* Fahrenheit Conversions */
convertTemperature.fahrenheit.celsius = f$c = function(f) {
  return (f - 32) * (5 / 9); // Fahrenheit to Celsius
};

convertTemperature.fahrenheit.fahrenheit = f$f = function(f) {
  return f; // Fahrenheit to Fahrenheit
};

convertTemperature.fahrenheit.kelvin = f$k = function(f) {
  return (f - 32) * (5 / 9) + 273.15; // Fahrenheit to Kelvin
};

/* Kelvin Conversions */
convertTemperature.kelvin.celsius = k$c = function(k) {
  return k - 273.15; // Kelvin to Celsius
};

convertTemperature.kelvin.fahrenheit = k$f = function(k) {
  return (k - 273.15) * (9 / 5) + 32; // Kelvin to Fahrenheit
};

convertTemperature.kelvin.kelvin = k$k = function(k) {
  return k; // Kelvin to Kelvin
};

convertTime = {
  nanosecond: {},
  microsecond: {},
  millisecond: {},
  second: {},
  minute: {},
  hour: {},
  day: {},
  week: {},
  month: {},
  year: {},
  decade: {},
  century: {},
  millennium: {}
};

/* Nanosecond Conversions */
convertTime.nanosecond.nanosecond = nano$nano = function(nano) {
  return nano; // Nanosecond to Nanosecond
};

convertTime.nanosecond.microsecond = nano$micro = function(nano) {
  return nano / 1e+3; // Nanosecond to Microsecond
};

convertTime.nanosecond.millisecond = nano$milli = function(nano) {
  return nano / 1e+6; // Nanosecond to Millisecond
};

convertTime.nanosecond.second = nano$second = function(nano) {
  return nano / 1e+9; // Nanosecond to Second
};

convertTime.nanosecond.minute = nano$minute = function(nano) {
  return nano / 6e+10; // Nanosecond to Minute
};

convertTime.nanosecond.hour = nano$hour = function(nano) {
  return nano / 3.6e+12; // Nanosecond to Hour
};

convertTime.nanosecond.day = nano$day = function(nano) {
  return nano / 8.64e+13; // Nanosecond to Day
};

convertTime.nanosecond.week = nano$week = function(nano) {
  return nano / 6.048e+14; // Nanosecond to Week
};

convertTime.nanosecond.month = nano$month = function(nano) {
  return nano / 2.628e+15; // Nanosecond to Month
};

convertTime.nanosecond.year = nano$year = function(nano) {
  return nano / 3.154e+16; // Nanosecond to Year
};

convertTime.nanosecond.decade = nano$decade = function(nano) {
  return nano / 3.154e+17; // Nanosecond to Decade
};

convertTime.nanosecond.century = nano$century = function(nano) {
  return nano / 3.154e+18; // Nanosecond to Century
};

convertTime.nanosecond.millennium = nano$millennium = function(nano) {
  return nano / 3.154e+19; // Nanosecond to Millennium
};

/* Microsecond Conversions */
convertTime.microsecond.nanosecond = micro$nano = function(micro) {
  return micro * 1e+3; // Microsecond to Nanosecond
};

convertTime.microsecond.microsecond = micro$micro = function(micro) {
  return micro; // Microsecond to Microsecond
};

convertTime.microsecond.millisecond = micro$milli = function(micro) {
  return micro / 1e+3; // Microsecond to Millisecond
};

convertTime.microsecond.second = micro$second = function(micro) {
  return micro / 1e+6; // Microsecond to Second
};

convertTime.microsecond.minute = micro$minute = function(micro) {
  return micro / 6e+7; // Microsecond to Minute
};

convertTime.microsecond.hour = micro$hour = function(micro) {
  return micro / 3.6e+9; // Microsecond to Hour
};

convertTime.microsecond.day = micro$day = function(micro) {
  return micro / 8.64e+10; // Microsecond to Day
};

convertTime.microsecond.week = micro$week = function(micro) {
  return micro / 6.048e+11; // Microsecond to Week
};

convertTime.microsecond.month = micro$month = function(micro) {
  return micro / 2.628e+12; // Microsecond to Month
};

convertTime.microsecond.year = micro$year = function(micro) {
  return micro / 3.154e+13; // Microsecond to Year
};

convertTime.microsecond.decade = micro$decade = function(micro) {
  return micro / 3.154e+14; // Microsecond to Decade
};

convertTime.microsecond.century = micro$century = function(micro) {
  return micro / 3.154e+15; // Microsecond to Century
};

convertTime.microsecond.millennium = micro$millennium = function(micro) {
  return micro / 3.154e+16; // Microsecond to Millennium
};

/* Millisecond Conversions */
convertTime.millisecond.nanosecond = milli$nano = function(milli) {
  return milli * 1e+6; // Millisecond to Nanosecond
};

convertTime.millisecond.microsecond = milli$micro = function(milli) {
  return milli * 1e+3; // Millisecond to Microsecond
};

convertTime.millisecond.millisecond = milli$milli = function(milli) {
  return milli; // Millisecond to Millisecond
};

convertTime.millisecond.second = milli$second = function(milli) {
  return milli / 1e+3; // Millisecond to Second
};

convertTime.millisecond.minute = milli$minute = function(milli) {
  return milli / 6e+4; // Millisecond to Minute
};

convertTime.millisecond.hour = milli$hour = function(milli) {
  return milli / 3.6e+6; // Millisecond to Hour
};

convertTime.millisecond.day = milli$day = function(milli) {
  return milli / 8.64e+7; // Millisecond to Day
};

convertTime.millisecond.week = milli$week = function(milli) {
  return milli / 6.048e+8; // Millisecond to Week
};

convertTime.millisecond.month = milli$month = function(milli) {
  return milli / 2.628e+9; // Millisecond to Month
};

convertTime.millisecond.year = milli$year = function(milli) {
  return milli / 3.154e+10; // Millisecond to Year
};

convertTime.millisecond.decade = milli$decade = function(milli) {
  return milli / 3.154e+11; // Millisecond to Decade
};

convertTime.millisecond.century = milli$century = function(milli) {
  return milli / 3.154e+12; // Millisecond to Century
};

convertTime.millisecond.millennium = milli$millennium = function(milli) {
  return milli / 3.154e+13; // Millisecond to Millennium
};

/* Second Conversions */
convertTime.second.nanosecond = second$nano = function(second) {
  return second * 1e+9; // Second to Nanosecond
};

convertTime.second.microsecond = second$micro = function(second) {
  return second * 1e+6; // Second to Microsecond
};

convertTime.second.millisecond = second$milli = function(second) {
  return second * 1e+3; // Second to Millisecond
};

convertTime.second.second = second$second = function(second) {
  return second; // Second to Second
};

convertTime.second.minute = second$minute = function(second) {
  return second / 6e+1; // Second to Minute
};

convertTime.second.hour = second$hour = function(second) {
  return second / 3.6e+3; // Second to Hour
};

convertTime.second.day = second$day = function(second) {
  return second / 8.64e+4; // Second to Day
};

convertTime.second.week = second$week = function(second) {
  return second / 6.048e+5; // Second to Week
};

convertTime.second.month = second$month = function(second) {
  return second / 2.628e+6; // Second to Month
};

convertTime.second.year = second$year = function(second) {
  return second / 3.154e+7; // Second to Year
};

convertTime.second.decade = second$decade = function(second) {
  return second / 3.154e+8; // Second to Decade
};

convertTime.second.century = second$century = function(second) {
  return second / 3.154e+9; // Second to Century
};

convertTime.second.millennium = second$millennium = function(second) {
  return second / 3.154e+10; // Second to Millennium
};

/* Minute Conversions */
convertTime.minute.nanosecond = minute$nano = function(minute) {
  return minute * 6e+10; // Minute to Nanosecond
};

convertTime.minute.microsecond = minute$micro = function(minute) {
  return minute * 6e+7; // Minute to Microsecond
};

convertTime.minute.millisecond = minute$milli = function(minute) {
  return minute * 6e+4; // Minute to Millisecond
};

convertTime.minute.second = minute$second = function(minute) {
  return minute * 6e+1; // Minute to Second
};

convertTime.minute.minute = minute$minute = function(minute) {
  return minute; // Minute to Minute
};

convertTime.minute.hour = minute$hour = function(minute) {
  return minute / 6e+1; // Minute to Hour
};

convertTime.minute.day = minute$day = function(minute) {
  return minute / 144e+1; // Minute to Day
};

convertTime.minute.week = minute$week = function(minute) {
  return minute / 1008e+1; // Minute to Week
};

convertTime.minute.month = minute$month = function(minute) {
  return minute / 438e+2; // Minute to Month
};

convertTime.minute.year = minute$year = function(minute) {
  return minute / 5256e+2; // Minute to Year
};

convertTime.minute.decade = minute$decade = function(minute) {
  return minute / 5256e+3; // Minute to Decade
};

convertTime.minute.century = minute$century = function(minute) {
  return minute / 5256e+4; // Minute to Century
};

convertTime.minute.millennium = minute$millennium = function(minute) {
  return minute / 5256e+5; // Minute to Millennium
};

/* Hour Conversions */
convertTime.hour.nanosecond = hour$nano = function(hour) {
  return hour * 3.6e+12; // Hour to Nanosecond
};

convertTime.hour.microsecond = hour$micro = function(hour) {
  return hour * 3.6e+9; // Hour to Microsecond
};

convertTime.hour.millisecond = hour$milli = function(hour) {
  return hour * 3.6e+6; // Hour to Millisecond
};

convertTime.hour.second = hour$second = function(hour) {
  return hour * 3.6e+3; // Hour to Second
};

convertTime.hour.minute = hour$minute = function(hour) {
  return hour * 6e+1; // Hour to Minute
};

convertTime.hour.hour = hour$hour = function(hour) {
  return hour; // Hour to Hour
};

convertTime.hour.day = hour$day = function(hour) {
  return hour / 24; // Hour to Day
};

convertTime.hour.week = hour$week = function(hour) {
  return hour / 168; // Hour to Week
};

convertTime.hour.month = hour$month = function(hour) {
  return hour / 73e+1; // Hour to Month
};

convertTime.hour.year = hour$year = function(hour) {
  return hour / 876e+1; // Hour to Year
};

convertTime.hour.decade = hour$decade = function(hour) {
  return hour / 876e+2; // Hour to Decade
};

convertTime.hour.century = hour$century = function(hour) {
  return hour / 876e+3; // Hour to Century
};

convertTime.hour.millennium = hour$millennium = function(hour) {
  return hour / 876e+4; // Hour to Millennium
};

/* Day Conversions */
convertTime.day.nanosecond = day$nano = function(day) {
  return day * 8.64e+13; // Day to Nanosecond
};

convertTime.day.microsecond = day$micro = function(day) {
  return day * 8.64e+10; // Day to Microsecond
};

convertTime.day.millisecond = day$milli = function(day) {
  return day * 8.64e+7; // Day to Millisecond
};

convertTime.day.second = day$second = function(day) {
  return day * 8.64e+4; // Day to Second
};

convertTime.day.minute = day$minute = function(day) {
  return day * 144e+1; // Day to Minute
};

convertTime.day.hour = day$hour = function(day) {
  return day * 24; // Day to Hour
};

convertTime.day.day = day$day = function(day) {
  return day; // Day to Day
};

convertTime.day.week = day$week = function(day) {
  return day / 7; // Day to Week
};

convertTime.day.month = day$month = function(day) {
  return day / 30.417; // Day to Month
};

convertTime.day.year = day$year = function(day) {
  return day / 365; // Day to Year
};

convertTime.day.decade = day$decade = function(day) {
  return day / 365e+1; // Day to Decade
};

convertTime.day.century = day$century = function(day) {
  return day / 365e+2; // Day to Century
};

convertTime.day.millennium = day$millennium = function(day) {
  return day / 365e+3; // Day to Millennium
};

/* Week Conversions */
convertTime.week.nanosecond = week$nano = function(week) {
  return week * 6.048e+14; // Week to Nanosecond
};

convertTime.week.microsecond = week$micro = function(week) {
  return week * 6.048e+11; // Week to Microsecond
};

convertTime.week.millisecond = week$milli = function(week) {
  return week * 6.048e+8; // Week to Millisecond
};

convertTime.week.second = week$second = function(week) {
  return week * 6.048e+5; // Week to Second
};

convertTime.week.minute = week$minute = function(week) {
  return week * 1008e+1; // Week to Minute
};

convertTime.week.hour = week$hour = function(week) {
  return week * 168; // Week to Hour
};

convertTime.week.day = week$day = function(week) {
  return week * 7; // Week to Day
};

convertTime.week.week = week$week = function(week) {
  return week; // Week to Week
};

convertTime.week.month = week$month = function(week) {
  return week / 4.345; // Week to Month
};

convertTime.week.year = week$year = function(week) {
  return week / 52.143; // Week to Year
};

convertTime.week.decade = week$decade = function(week) {
  return week / 521.43; // Week to Decade
};

convertTime.week.century = week$century = function(week) {
  return week / 5214.3; // Week to Century
};

convertTime.week.millennium = week$millennium = function(week) {
  return week / 52143; // Week to Millennium
};

/* Month Conversions */
convertTime.month.nanosecond = month$nano = function(month) {
  return month * 2.628e+15; // Month to Nanosecond
};

convertTime.month.microsecond = month$micro = function(month) {
  return month * 2.628e+12; // Month to Microsecond
};

convertTime.month.millisecond = month$milli = function(month) {
  return month * 2.628e+9; // Month to Millisecond
};

convertTime.month.second = month$second = function(month) {
  return month * 2.628e+6; // Month to Second
};

convertTime.month.minute = month$minute = function(month) {
  return month * 438e+2; // Month to Minute
};

convertTime.month.hour = month$hour = function(month) {
  return month * 73e+1; // Month to Hour
};

convertTime.month.day = month$day = function(month) {
  return month * 30.417; // Month to Day
};

convertTime.month.week = month$week = function(month) {
  return month * 4.345; // Month to Week
};

convertTime.month.month = month$month = function(month) {
  return month; // Month to Month
};

convertTime.month.year = month$year = function(month) {
  return month / 12; // Month to Year
};

convertTime.month.decade = month$decade = function(month) {
  return month / 12e+1; // Month to Decade
};

convertTime.month.century = month$century = function(month) {
  return month / 12e+2; // Month to Century
};

convertTime.month.millennium = month$millennium = function(month) {
  return month / 12e+3; // Month to Millennium
};

/* Year Conversions */
convertTime.year.nanosecond = year$nano = function(year) {
  return year * 3.154e+16; // Year to Nanosecond
};

convertTime.year.microsecond = year$micro = function(year) {
  return year * 3.154e+13; // Year to Microsecond
};

convertTime.year.millisecond = year$milli = function(year) {
  return year * 3.154e+10; // Year to Millisecond
};

convertTime.year.second = year$second = function(year) {
  return year * 3.154e+7; // Year to Second
};

convertTime.year.minute = year$minute = function(year) {
  return year * 5256e+2; // Year to Minute
};

convertTime.year.hour = year$hour = function(year) {
  return year * 876e+1; // Year to Hour
};

convertTime.year.day = year$day = function(year) {
  return year * 365; // Year to Day
};

convertTime.year.week = year$week = function(year) {
  return year * 52.143; // Year to Week
};

convertTime.year.month = year$month = function(year) {
  return year * 12; // Year to Month
};

convertTime.year.year = year$year = function(year) {
  return year; // Year to Year
};

convertTime.year.decade = year$decade = function(year) {
  return year / 1e+1; // Year to Decade
};

convertTime.year.century = year$century = function(year) {
  return year / 1e+2; // Year to Century
};

convertTime.year.millennium = year$millennium = function(year) {
  return year / 1e+3; // Year to Millennium
};

/* Decade Conversions */
convertTime.decade.nanosecond = decade$nano = function(decade) {
  return decade * 3.154e+17; // Decade to Nanosecond
};

convertTime.decade.microsecond = decade$micro = function(decade) {
  return decade * 3.154e+14; // Decade to Microsecond
};

convertTime.decade.millisecond = decade$milli = function(decade) {
  return decade * 3.154e+11; // Decade to Millisecond
};

convertTime.decade.second = decade$second = function(decade) {
  return decade * 3.154e+8; // Decade to Second
};

convertTime.decade.minute = decade$minute = function(decade) {
  return decade * 5256e+3; // Decade to Minute
};

convertTime.decade.hour = decade$hour = function(decade) {
  return decade * 876e+2; // Decade to Hour
};

convertTime.decade.day = decade$day = function(decade) {
  return decade * 365e+1; // Decade to Day
};

convertTime.decade.week = decade$week = function(decade) {
  return decade * 521.43; // Decade to Week
};

convertTime.decade.month = decade$month = function(decade) {
  return decade * 12e+1; // Decade to Month
};

convertTime.decade.year = decade$year = function(decade) {
  return decade * 1e+1; // Decade to Year
};

convertTime.decade.decade = decade$decade = function(decade) {
  return decade; // Decade to Decade
};

convertTime.decade.century = decade$century = function(decade) {
  return decade / 1e+1; // Decade to Century
};

convertTime.decade.millennium = decade$millennium = function(decade) {
  return decade / 1e+2; // Decade to Millennium
};

/* Century Conversions */
convertTime.century.nanosecond = century$nano = function(century) {
  return century * 3.154e+18; // Century to Nanosecond
};

convertTime.century.microsecond = century$micro = function(century) {
  return century * 3.154e+15; // Century to Microsecond
};

convertTime.century.millisecond = century$milli = function(century) {
  return century * 3.154e+12; // Century to Millisecond
};

convertTime.century.second = century$second = function(century) {
  return century * 3.154e+9; // Century to Second
};

convertTime.century.minute = century$minute = function(century) {
  return century * 5256e+4; // Century to Minute
};

convertTime.century.hour = century$hour = function(century) {
  return century * 876e+3; // Century to Hour
};

convertTime.century.day = century$day = function(century) {
  return century * 365e+2; // Century to Day
};

convertTime.century.week = century$week = function(century) {
  return century * 5214.3; // Century to Week
};

convertTime.century.month = century$month = function(century) {
  return century * 12e+2; // Century to Month
};

convertTime.century.year = century$year = function(century) {
  return century * 1e+2; // Century to Year
};

convertTime.century.decade = century$decade = function(century) {
  return century * 1e+1; // Century to Decade
};

convertTime.century.century = century$century = function(century) {
  return century; // Century to Century
};

convertTime.century.millennium = century$millennium = function(century) {
  return century / 1e+1; // Century to Millennium
};

/* Millennium Conversions */
convertTime.millennium.nanosecond = millennium$nano = function(millennium) {
  return millennium * 3.154e+19; // Millennium to Nanosecond
};

convertTime.millennium.microsecond = millennium$micro = function(millennium) {
  return millennium * 3.154e+16; // Millennium to Microsecond
};

convertTime.millennium.millisecond = millennium$milli = function(millennium) {
  return millennium * 3.154e+13; // Millennium to Millisecond
};

convertTime.millennium.second = millennium$second = function(millennium) {
  return millennium * 3.154e+10; // Millennium to Second
};

convertTime.millennium.minute = millennium$minute = function(millennium) {
  return millennium * 5256e+5; // Millennium to Minute
};

convertTime.millennium.hour = millennium$hour = function(millennium) {
  return millennium * 876e+4; // Millennium to Hour
};

convertTime.millennium.day = millennium$day = function(millennium) {
  return millennium * 365e+3; // Millennium to Day
};

convertTime.millennium.week = millennium$week = function(millennium) {
  return millennium * 52143; // Millennium to Week
};

convertTime.millennium.month = millennium$month = function(millennium) {
  return millennium * 12e+3; // Millennium to Month
};

convertTime.millennium.year = millennium$year = function(millennium) {
  return millennium * 1e+3; // Millennium to Year
};

convertTime.millennium.decade = millennium$decade = function(millennium) {
  return millennium * 1e+2; // Millennium to Decade
};

convertTime.millennium.century = millennium$century = function(millennium) {
  return millennium * 1e+1; // Millennium to Century
};

convertTime.millennium.millennium = millennium$millennium = function(millennium) {
  return millennium; // Millennium to Millennium
};

convertVolume = {
  milliliter: {},
  liter: {},
  teaspoon: {},
  tablespoon: {},
  cup: {},
  pint: {},
  quart: {},
  gallon: {},
  nanometerCu: {},
  micrometerCu: {},
  millimeterCu: {},
  centimeterCu: {},
  decimeterCu: {},
  meterCu: {},
  decameterCu: {},
  hectometerCu: {},
  kilometerCu: {},
  inchCu: {},
  footCu: {},
  yardCu: {},
  mileCu: {}
};

/* Milliliter Conversions */
convertVolume.milliliter.milliliter = ml$ml = function(ml) {
  return ml; // Milliliter to Milliliter
};

convertVolume.milliliter.liter = ml$l = function(ml) {
  return ml / 1000; // Milliliter to Liter
};

convertVolume.milliliter.teaspoon = ml$tea = function(ml) {
  return ml / 5.919; // Milliliter to Teaspoon
};

convertVolume.milliliter.tablespoon = ml$tbl = function(ml) {
  return ml / 17.758; // Milliliter to Tablespoon
};

convertVolume.milliliter.cup = ml$cup = function(ml) {
  return ml / 284.1; // Milliliter to Cup
};

convertVolume.milliliter.pint = ml$pt = function(ml) {
  return ml / 568.3; // Milliliter to Pint
};

convertVolume.milliliter.quart = ml$qt = function(ml) {
  return ml / 1137; // Milliliter to Quart
};

convertVolume.milliliter.gallon = ml$gal = function(ml) {
  return ml / 4546; // Milliliter to Gallon
};

/* Liter Conversions */
convertVolume.liter.milliliter = l$ml = function(l) {
  return l * 1000; // Liter to Milliliter
};

convertVolume.liter.liter = l$l = function(l) {
  return l; // Liter to Liter
};

convertVolume.liter.teaspoon = l$tea = function(l) {
  return l * 168.9; // Liter to Teaspoon
};

convertVolume.liter.tablespoon = l$tbl = function(l) {
  return l * 56.312; // Liter to Tablespoon
};

convertVolume.liter.cup = l$cup = function(l) {
  return l * 3.52; // Liter to Cup
};

convertVolume.liter.pint = l$pt = function(l) {
  return l * 1.76; // Liter to Pint
};

convertVolume.liter.quart = l$qt = function(l) {
  return l / 1.137; // Liter to Quart
};

convertVolume.liter.gallon = l$gal = function(l) {
  return l / 4.546; // Liter to Gallon
};

/* Teaspoon Conversions */
convertVolume.teaspoon.milliliter = tea$ml = function(tea) {
  return tea * 5.919; // Teaspoon to Milliliter
};

convertVolume.teaspoon.liter = tea$l = function(tea) {
  return tea / 168.9; // Teaspoon to Liter
};

convertVolume.teaspoon.teaspoon = tea$tea = function(tea) {
  return tea; // Teaspoon to Teaspoon
};

convertVolume.teaspoon.tablespoon = tea$tbl = function(tea) {
  return tea / 3; // Teaspoon to Tablespoon
};

convertVolume.teaspoon.cup = tea$cup = function(tea) {
  return tea / 48; // Teaspoon to Cup
};

convertVolume.teaspoon.pint = tea$pt = function(tea) {
  return tea / 96; // Teaspoon to Pint
};

convertVolume.teaspoon.quart = tea$qt = function(tea) {
  return tea / 192; // Teaspoon to Quart
};

convertVolume.teaspoon.gallon = tea$gal = function(tea) {
  return tea / 768; // Teaspoon to Gallon
};

/* Tablespoon Conversions */
convertVolume.tablespoon.milliliter = tbl$ml = function(tbl) {
  return tbl * 17.758; // Tablespoon to Milliliter
};

convertVolume.tablespoon.liter = tbl$l = function(tbl) {
  return tbl / 56.312; // Tablespoon to Liter
};

convertVolume.tablespoon.teaspoon = tbl$tea = function(tbl) {
  return tbl * 3; // Tablespoon to Teaspoon
};

convertVolume.tablespoon.tablespoon = tbl$tbl = function(tbl) {
  return tbl; // Tablespoon to Tablespoon
};

convertVolume.tablespoon.cup = tbl$cup = function(tbl) {
  return tbl / 16; // Tablespoon to Cup
};

convertVolume.tablespoon.pint = tbl$pt = function(tbl) {
  return tbl / 32; // Tablespoon to Pint
};

convertVolume.tablespoon.quart = tbl$qt = function(tbl) {
  return tbl / 64; // Tablespoon to Quart
};

convertVolume.tablespoon.gallon = tbl$gal = function(tbl) {
  return tbl / 256; // Tablespoon to Gallon
};

/* Cup Conversions */
convertVolume.cup.milliliter = cup$ml = function(cup) {
  return cup * 284.1; // Cup to Milliliter
};

convertVolume.cup.liter = cup$l = function(cup) {
  return cup / 3.52; // Cup to Liter
};

convertVolume.cup.teaspoon = cup$tea = function(cup) {
  return cup * 48; // Cup to Teaspoon
};

convertVolume.cup.tablespoon = cup$tbl = function(cup) {
  return cup * 16; // Cup to Tablespoon
};

convertVolume.cup.cup = cup$cup = function(cup) {
  return cup; // Cup to Cup
};

convertVolume.cup.pint = cup$pt = function(cup) {
  return cup / 2; // Cup to Pint
};

convertVolume.cup.quart = cup$qt = function(cup) {
  return cup / 4; // Cup to Quart
};

convertVolume.cup.gallon = cup$gal = function(cup) {
  return cup / 16; // Cup to Gallon
};

/* Pint Conversions */
convertVolume.pint.milliliter = pt$ml = function(pt) {
  return pt * 568.3; // Pint to Milliliter
};

convertVolume.pint.liter = pt$l = function(pt) {
  return pt / 1.76; // Pint to Liter
};

convertVolume.pint.teaspoon = pt$tea = function(pt) {
  return pt * 96; // Pint to Teaspoon
};

convertVolume.pint.tablespoon = pt$tbl = function(pt) {
  return pt * 32; // Pint to Tablespoon
};

convertVolume.pint.cup = pt$cup = function(pt) {
  return pt * 2; // Pint to Cup
};

convertVolume.pint.pint = pt$pt = function(pt) {
  return pt; // Pint to Pint
};

convertVolume.pint.quart = pt$qt = function(pt) {
  return pt / 2; // Pint to Quart
};

convertVolume.pint.gallon = pt$gal = function(pt) {
  return pt / 8; // Pint to Gallon
};

/* Quart Conversions */
convertVolume.quart.milliliter = qt$ml = function(qt) {
  return qt * 1137; // Quart to Milliliter
};

convertVolume.quart.liter = qt$l = function(qt) {
  return qt * 1.137; // Quart to Liter
};

convertVolume.quart.teaspoon = qt$tea = function(qt) {
  return qt * 192; // Quart to Teaspoon
};

convertVolume.quart.tablespoon = qt$tbl = function(qt) {
  return qt * 64; // Quart to Tablespoon
};

convertVolume.quart.cup = qt$cup = function(qt) {
  return qt * 4; // Quart to Cup
};

convertVolume.quart.pint = qt$pt = function(qt) {
  return qt * 2; // Quart to Pint
};

convertVolume.quart.quart = qt$qt = function(qt) {
  return qt; // Quart to Quart
};

convertVolume.quart.gallon = qt$gal = function(qt) {
  return qt / 4; // Quart to Gallon
};

/* Gallon Conversions */
convertVolume.gallon.milliliter = gal$ml = function(gal) {
  return gal * 4546; // Gallon to Milliliter
};

convertVolume.gallon.liter = gal$l = function(gal) {
  return gal * 4.546; // Gallon to Liter
};

convertVolume.gallon.teaspoon = gal$tea = function(gal) {
  return gal * 768; // Gallon to Teaspoon
};

convertVolume.gallon.tablespoon = gal$tbl = function(gal) {
  return gal * 256; // Gallon to Tablespoon
};

convertVolume.gallon.cup = gal$cup = function(gal) {
  return gal * 16; // Gallon to Cup
};

convertVolume.gallon.pint = gal$pt = function(gal) {
  return gal * 8; // Gallon to Pint
};

convertVolume.gallon.quart = gal$qt = function(gal) {
  return gal * 4; // Gallon to Quart
};

convertVolume.gallon.gallon = gal$gal = function(gal) {
  return gal; // Gallon to Gallon
};

/* Nanometer Cubed Conversions */
convertVolume.nanometerCu.nanometerCu = nmCu$nmCu = function(nmCu) {
  return nmCu; // Nanometer Cubed to Nanometer Cubed
};

convertVolume.nanometerCu.micrometerCu = nmCu$umCu = function(nmCu) {
  return nmCu / 1e+9; // Nanometer Cubed to Micrometer Cubed
};

convertVolume.nanometerCu.millimeterCu = nmCu$mmCu = function(nmCu) {
  return nmCu / 1e+18; // Nanometer Cubed to Millimeter Cubed
};

convertVolume.nanometerCu.centimeterCu = nmCu$cmCu = function(nmCu) {
  return nmCu / 1e+21; // Nanometer Cubed to Centimeter Cubed
};

convertVolume.nanometerCu.decimeterCu = nmCu$dmCu = function(nmCu) {
  return nmCu / 1e+24; // Nanometer Cubed to Decimeter Cubed
};

convertVolume.nanometerCu.meterCu = nmCu$mCu = function(nmCu) {
  return nmCu / 1e+27; // Nanometer Cubed to Meter Cubed
};

convertVolume.nanometerCu.decameterCu = nmCu$damCu = function(nmCu) {
  return nmCu / 1e+30; // Nanometer Cubed to Decameter Cubed
};

convertVolume.nanometerCu.hectometerCu = nmCu$hmCu = function(nmCu) {
  return nmCu / 1e+33; // Nanometer Cubed to Hectometer Cubed
};

convertVolume.nanometerCu.kilometerCu = nmCu$kmCu = function(nmCu) {
  return nmCu / 1e+36; // Nanometer Cubed to Kilometer Cubed
};

convertVolume.nanometerCu.inchCu = nmCu$inchCu = function(nmCu) {
  return nmCu / 16387e+18; // Nanometer Cubed to Inch Cubed
};

convertVolume.nanometerCu.footCu = nmCu$footCu = function(nmCu) {
  return nmCu / 28317e+21; // Nanometer Cubed to Foot Cubed
};

convertVolume.nanometerCu.yardCu = nmCu$yardCu = function(nmCu) {
  return nmCu / 7646e+23; // Nanometer Cubed to Yard Cubed
};

convertVolume.nanometerCu.mileCu = nmCu$mileCu = function(nmCu) {
  return nmCu / 4168e+33; // Nanometer Cubed to Mile Cubed
};

/* Micrometer Cubed Conversions */
convertVolume.micrometerCu.nanometerCu = umCu$nmCu = function(umCu) {
  return umCu * 1e+9; // Micrometer Cubed to Nanometer Cubed
};

convertVolume.micrometerCu.micrometerCu = umCu$umCu = function(umCu) {
  return umCu; // Micrometer Cubed to Micrometer Cubed
};

convertVolume.micrometerCu.millimeterCu = umCu$mmCu = function(umCu) {
  return umCu / 1e+9; // Micrometer Cubed to Millimeter Cubed
};

convertVolume.micrometerCu.centimeterCu = umCu$cmCu = function(umCu) {
  return umCu / 1e+12; // Micrometer Cubed to Centimeter Cubed
};

convertVolume.micrometerCu.decimeterCu = umCu$dmCu = function(umCu) {
  return umCu / 1e+15; // Micrometer Cubed to Decimeter Cubed
};

convertVolume.micrometerCu.meterCu = umCu$mCu = function(umCu) {
  return umCu / 1e+18; // Micrometer Cubed to Meter Cubed
};

convertVolume.micrometerCu.decameterCu = umCu$damCu = function(umCu) {
  return umCu / 1e+21; // Micrometer Cubed to Decameter Cubed
};

convertVolume.micrometerCu.hectometerCu = umCu$hmCu = function(umCu) {
  return umCu / 1e+24; // Micrometer Cubed to Hectometer Cubed
};

convertVolume.micrometerCu.kilometerCu = umCu$kmCu = function(umCu) {
  return umCu / 1e+27; // Micrometer Cubed to Kilometer Cubed
};

convertVolume.micrometerCu.inchCu = umCu$inchCu = function(umCu) {
  return umCu / 16387e+9; // Micrometer Cubed to Inch Cubed
};

convertVolume.micrometerCu.footCu = umCu$footCu = function(umCu) {
  return umCu / 28317e+12; // Micrometer Cubed to Foot Cubed
};

convertVolume.micrometerCu.yardCu = umCu$yardCu = function(umCu) {
  return umCu / 7646e+14; // Micrometer Cubed to Yard Cubed
};

convertVolume.micrometerCu.mileCu = umCu$mileCu = function(umCu) {
  return umCu / 4168e+24; // Micrometer Cubed to Mile Cubed
};

/* Millimeter Cubed Conversions */
convertVolume.millimeterCu.nanometerCu = mmCu$nmCu = function(mmCu) {
  return mmCu * 1e+18; // Millimeter Cubed to Nanometer Cubed
};

convertVolume.millimeterCu.micrometerCu = mmCu$umCu = function(mmCu) {
  return mmCu * 1e+9; // Millimeter Cubed to Micrometer Cubed
};

convertVolume.millimeterCu.millimeterCu = mmCu$mmCu = function(mmCu) {
  return mmCu; // Millimeter Cubed to Millimeter Cubed
};

convertVolume.millimeterCu.centimeterCu = mmCu$cmCu = function(mmCu) {
  return mmCu / 1e+3; // Millimeter to Cubed Centimeter Cubed
};

convertVolume.millimeterCu.decimeterCu = mmCu$dmCu = function(mmCu) {
  return mmCu / 1e+6; // Millimeter Cubed to Decimeter Cubed
};

convertVolume.millimeterCu.meterCu = mmCu$mCu = function(mmCu) {
  return mmCu / 1e+9; // Millimeter Cubed to Meter Cubed
};

convertVolume.millimeterCu.decameterCu = mmCu$damCu = function(mmCu) {
  return mmCu / 1e+12; // Millimeter Cubed to Decameter Cubed
};

convertVolume.millimeterCu.hectometerCu = mmCu$hmCu = function(mmCu) {
  return mmCu / 1e+15; // Millimeter Cubed to Hectometer Cubed
};

convertVolume.millimeterCu.kilometerCu = mmCu$kmCu = function(mmCu) {
  return mmCu / 1e+18; // Millimeter Cubed to Kilometer Cubed
};

convertVolume.millimeterCu.inchCu = mmCu$inchCu = function(mmCu) {
  return mmCu / 16387; // Millimeter Cubed to Inch Cubed
};

convertVolume.millimeterCu.footCu = mmCu$footCu = function(mmCu) {
  return mmCu / 28317e+3; // Millimeter Cubed to Foot Cubed
};

convertVolume.millimeterCu.yardCu = mmCu$yardCu = function(mmCu) {
  return mmCu / 7646e+5; // Millimeter Cubed to Yard Cubed
};

convertVolume.millimeterCu.mileCu = mmCu$mileCu = function(mmCu) {
  return mmCu / 4168e+15; // Millimeter Cubed to Mile Cubed
};

/* Centimeter Cubed Conversions */
convertVolume.centimeterCu.nanometerCu = cmCu$nmCu = function(cmCu) {
  return cmCu * 1e+21; // Centimeter Cubed to Nanometer Cubed
};

convertVolume.centimeterCu.micrometerCu = cmCu$umCu = function(cmCu) {
  return cmCu * 1e+12; // Centimeter Cubed to Micrometer Cubed
};

convertVolume.centimeterCu.millimeterCu = cmCu$mmCu = function(cmCu) {
  return cmCu * 1e+3; // Centimeter Cubed to Millimeter Cubed
};

convertVolume.centimeterCu.centimeterCu = cmCu$cmCu = function(cmCu) {
  return cmCu; // Centimeter Cubed to Centimeter Cubed
};

convertVolume.centimeterCu.decimeterCu = cmCu$dmCu = function(cmCu) {
  return cmCu / 1e+3; // Centimeter Cubed to Decimeter Cubed
};

convertVolume.centimeterCu.meterCu = cmCu$mCu = function(cmCu) {
  return cmCu / 1e+6; // Centimeter Cubed to Meter Cubed
};

convertVolume.centimeterCu.decameterCu = cmCu$damCu = function(cmCu) {
  return cmCu / 1e+9; // Centimeter Cubed to Decameter Cubed
};

convertVolume.centimeterCu.hectometerCu = cmCu$hmCu = function(cmCu) {
  return cmCu / 1e+12; // Centimeter Cubed to Hectometer Cubed
};

convertVolume.centimeterCu.kilometerCu = cmCu$kmCu = function(cmCu) {
  return cmCu / 1e+15; // Centimeter Cubed to Kilometer Cubed
};

convertVolume.centimeterCu.inchCu = cmCu$inchCu = function(cmCu) {
  return cmCu / 16.387; // Centimeter Cubed to Inch Cubed
};

convertVolume.centimeterCu.footCu = cmCu$footCu = function(cmCu) {
  return cmCu / 28317; // Centimeter Cubed to Foot Cubed
};

convertVolume.centimeterCu.yardCu = cmCu$yardCu = function(cmCu) {
  return cmCu / 7646e+2; // Centimeter Cubed to Yard Cubed
};

convertVolume.centimeterCu.mileCu = cmCu$mileCu = function(cmCu) {
  return cmCu / 4168e+12; // Centimeter Cubed to Mile Cubed
};

/* Decimeter Cubed Conversions */
convertVolume.decimeterCu.nanometerCu = dmCu$nmCu = function(dmCu) {
  return dmCu * 1e+24; // Decimeter Cubed to Nanometer Cubed
};

convertVolume.decimeterCu.micrometerCu = dmCu$umCu = function(dmCu) {
  return dmCu * 1e+15; // Decimeter Cubed to Micrometer Cubed
};

convertVolume.decimeterCu.millimeterCu = dmCu$mmCu = function(dmCu) {
  return dmCu * 1e+6; // Decimeter Cubed to Millimeter Cubed
};

convertVolume.decimeterCu.centimeterCu = dmCu$cmCu = function(dmCu) {
  return dmCu * 1e+3; // Decimeter Cubed to Centimeter Cubed
};

convertVolume.decimeterCu.decimeterCu = dmCu$dmCu = function(dmCu) {
  return dmCu; // Decimeter Cubed to Decimeter Cubed
};

convertVolume.decimeterCu.meterCu = dmCu$mCu = function(dmCu) {
  return dmCu / 1e+3; // Decimeter Cubed to Meter Cubed
};

convertVolume.decimeterCu.decameterCu = dmCu$damCu = function(dmCu) {
  return dmCu / 1e+6; // Decimeter Cubed to Decameter Cubed
};

convertVolume.decimeterCu.hectometerCu = dmCu$hmCu = function(dmCu) {
  return dmCu / 1e+9; // Decimeter Cubed to Hectometer Cubed
};

convertVolume.decimeterCu.kilometerCu = dmCu$kmCu = function(dmCu) {
  return dmCu / 1e+12; // Decimeter Cubed to Kilometer Cubed
};

convertVolume.decimeterCu.inchCu = dmCu$inchCu = function(dmCu) {
  return dmCu * 61.024; // Decimeter Cubed to Inch Cubed
};

convertVolume.decimeterCu.footCu = dmCu$footCu = function(dmCu) {
  return dmCu / 28.317; // Decimeter Cubed to Foot Cubed
};

convertVolume.decimeterCu.yardCu = dmCu$yardCu = function(dmCu) {
  return dmCu / 764.6; // Decimeter Cubed to Yard Cubed
};

convertVolume.decimeterCu.mileCu = dmCu$mileCu = function(dmCu) {
  return dmCu / 4168e+9; // Decimeter Cubed to Mile Cubed
};

/* Meter Cubed Conversions */
convertVolume.meterCu.nanometerCu = mCu$nmCu = function(mCu) {
  return mCu * 1e+27; // Meter Cubed to Nanometer Cubed
};

convertVolume.meterCu.micrometerCu = mCu$umCu = function(mCu) {
  return mCu * 1e+18; // Meter Cubed to Micrometer Cubed
};

convertVolume.meterCu.millimeterCu = mCu$mmCu = function(mCu) {
  return mCu * 1e+9; // Meter Cubed to Millimeter Cubed
};

convertVolume.meterCu.centimeterCu = mCu$cmCu = function(mCu) {
  return mCu * 1e+6; // Meter Cubed to Centimeter Cubed
};

convertVolume.meterCu.decimeterCu = mCu$dmCu = function(mCu) {
  return mCu * 1e+3; // Meter Cubed to Decimeter Cubed
};

convertVolume.meterCu.meterCu = mCu$mCu = function(mCu) {
  return mCu; // Meter Cubed to Meter Cubed
};

convertVolume.meterCu.decameterCu = mCu$damCu = function(mCu) {
  return mCu / 1e+3; // Meter Cubed to Decameter Cubed
};

convertVolume.meterCu.hectometerCu = mCu$hmCu = function(mCu) {
  return mCu / 1e+6; // Meter Cubed to Hectometer Cubed
};

convertVolume.meterCu.kilometerCu = mCu$kmCu = function(mCu) {
  return mCu / 1e+9; // Meter Cubed to Kilometer Cubed
};

convertVolume.meterCu.inchCu = mCu$inchCu = function(mCu) {
  return mCu * 61024; // Meter Cubed to Inch Cubed
};

convertVolume.meterCu.footCu = mCu$footCu = function(mCu) {
  return mCu * 35.315; // Meter Cubed to Foot Cubed
};

convertVolume.meterCu.yardCu = mCu$yardCu = function(mCu) {
  return mCu * 1.308; // Meter Cubed to Yard Cubed
};

convertVolume.meterCu.mileCu = mCu$mileCu = function(mCu) {
  return mCu / 4168e+6; // Meter Cubed to Mile Cubed
};

/* Decameter Cubed Conversions */
convertVolume.decameterCu.nanometerCu = damCu$nmCu = function(damCu) {
  return damCu * 1e+30; // Decameter Cubed to Nanometer Cubed
};

convertVolume.decameterCu.micrometerCu = damCu$umCu = function(damCu) {
  return damCu * 1e+21; // Decameter Cubed to Micrometer Cubed
};

convertVolume.decameterCu.millimeterCu = damCu$mmCu = function(damCu) {
  return damCu * 1e+12; // Decameter Cubed to Millimeter Cubed
};

convertVolume.decameterCu.centimeterCu = damCu$cmCu = function(damCu) {
  return damCu * 1e+9; // Decameter Cubed to Centimeter Cubed
};

convertVolume.decameterCu.decimeterCu = damCu$dmCu = function(damCu) {
  return damCu * 1e+6; // Decameter Cubed to Decimeter Cubed
};

convertVolume.decameterCu.meterCu = damCu$mCu = function(damCu) {
  return damCu * 1e+3; // Decameter Cubed to Meter Cubed
};

convertVolume.decameterCu.decameterCu = damCu$damCu = function(damCu) {
  return damCu; // Decameter Cubed to Decameter Cubed
};

convertVolume.decameterCu.hectometerCu = damCu$hmCu = function(damCu) {
  return damCu / 1e+3; // Decameter Cubed to Hectometer Cubed
};

convertVolume.decameterCu.kilometerCu = damCu$kmCu = function(damCu) {
  return damCu / 1e+6; // Decameter Cubed to Kilometer Cubed
};

convertVolume.decameterCu.inchCu = damCu$inchCu = function(damCu) {
  return damCu * 61024e+3; // Decameter Cubed to Inch Cubed
};

convertVolume.decameterCu.footCu = damCu$footCu = function(damCu) {
  return damCu * 35315; // Decameter Cubed to Foot Cubed
};

convertVolume.decameterCu.yardCu = damCu$yardCu = function(damCu) {
  return damCu * 1308; // Decameter Cubed to Yard Cubed
};

convertVolume.decameterCu.mileCu = damCu$mileCu = function(damCu) {
  return damCu / 4168e+3; // Decameter Cubed to Mile Cubed
};

/* Hectometer Cubed Conversions */
convertVolume.hectometerCu.nanometerCu = hmCu$nmCu = function(hmCu) {
  return hmCu * 1e+33; // Hectometer Cubed to Nanometer Cubed
};

convertVolume.hectometerCu.micrometerCu = hmCu$umCu = function(hmCu) {
  return hmCu * 1e+24; // Hectometer Cubed to Micrometer Cubed
};

convertVolume.hectometerCu.millimeterCu = hmCu$mmCu = function(hmCu) {
  return hmCu * 1e+15; // Hectometer Cubed to Millimeter Cubed
};

convertVolume.hectometerCu.centimeterCu = hmCu$cmCu = function(hmCu) {
  return hmCu * 1e+12; // Hectometer Cubed to Centimeter Cubed
};

convertVolume.hectometerCu.decimeterCu = hmCu$dmCu = function(hmCu) {
  return hmCu * 1e+9; // Hectometer Cubed to Decimeter Cubed
};

convertVolume.hectometerCu.meterCu = hmCu$mCu = function(hmCu) {
  return hmCu * 1e+6; // Hectometer Cubed to Meter Cubed
};

convertVolume.hectometerCu.decameterCu = hmCu$damCu = function(hmCu) {
  return hmCu * 1e+3; // Hectometer Cubed to Decameter Cubed
};

convertVolume.hectometerCu.hectometerCu = hmCu$hmCu = function(hmCu) {
  return hmCu; // Hectometer Cubed to Hectometer Cubed
};

convertVolume.hectometerCu.kilometerCu = hmCu$kmCu = function(hmCu) {
  return hmCu / 1e+3; // Hectometer Cubed to Kilometer Cubed
};

convertVolume.hectometerCu.inchCu = hmCu$inchCu = function(hmCu) {
  return hmCu * 61024e+6; // Hectometer Cubed to Inch Cubed
};

convertVolume.hectometerCu.footCu = hmCu$footCu = function(hmCu) {
  return hmCu * 35315e+3; // Hectometer Cubed to Foot Cubed
};

convertVolume.hectometerCu.yardCu = hmCu$yardCu = function(hmCu) {
  return hmCu * 1308e+3; // Hectometer Cubed to Yard Cubed
};

convertVolume.hectometerCu.mileCu = hmCu$mileCu = function(hmCu) {
  return hmCu / 4168; // Hectometer Cubed to Mile Cubed
};

/* Kilometer Cubed Conversions */
convertVolume.kilometerCu.nanometerCu = kmCu$nmCu = function(kmCu) {
  return kmCu * 1e+36; // Kilometer Cubed to Nanometer Cubed
};

convertVolume.kilometerCu.micrometerCu = kmCu$umCu = function(kmCu) {
  return kmCu * 1e+27; // Kilometer Cubed to Micrometer Cubed
};

convertVolume.kilometerCu.millimeterCu = kmCu$mmCu = function(kmCu) {
  return kmCu * 1e+18; // Kilometer Cubed to Millimeter Cubed
};

convertVolume.kilometerCu.centimeterCu = kmCu$cmCu = function(kmCu) {
  return kmCu * 1e+15; // Kilometer Cubed to Centimeter Cubed
};

convertVolume.kilometerCu.decimeterCu = kmCu$dmCu = function(kmCu) {
  return kmCu * 1e+12; // Kilometer Cubed to Decimeter Cubed
};

convertVolume.kilometerCu.meterCu = kmCu$mCu = function(kmCu) {
  return kmCu * 1e+9; // Kilometer Cubed to Meter Cubed
};

convertVolume.kilometerCu.decameterCu = kmCu$damCu = function(kmCu) {
  return kmCu * 1e+6; // Kilometer Cubed to Decameter Cubed
};

convertVolume.kilometerCu.hectometerCu = kmCu$hmCu = function(kmCu) {
  return kmCu * 1e+3; // Kilometer Cubed to Hectometer Cubed
};

convertVolume.kilometerCu.kilometerCu = kmCu$kmCu = function(kmCu) {
  return kmCu; // Kilometer Cubed to Kilometer Cubed
};

convertVolume.kilometerCu.inchCu = kmCu$inchCu = function(kmCu) {
  return kmCu * 61024e+9; // Kilometer Cubed to Inch Cubed
};

convertVolume.kilometerCu.footCu = kmCu$footCu = function(kmCu) {
  return kmCu * 35315e+6; // Kilometer Cubed to Foot Cubed
};

convertVolume.kilometerCu.yardCu = kmCu$yardCu = function(kmCu) {
  return kmCu * 1308e+6; // Kilometer Cubed to Yard Cubed
};

convertVolume.kilometerCu.mileCu = kmCu$mileCu = function(kmCu) {
  return kmCu / 4.168; // Kilometer Cubed to Mile Cubed
};

/* Inch Cubed Conversions */
convertVolume.inchCu.nanometerCu = inchCu$nmCu = function(inchCu) {
  return inchCu * 1.6387e+18; // Inch Cubed to Nanometer Cubed
};

convertVolume.inchCu.micrometerCu = inchCu$umCu = function(inchCu) {
  return inchCu * 16387e+9; // Inch Cubed to Micrometer Cubed
};

convertVolume.inchCu.millimeterCu = inchCu$mmCu = function(inchCu) {
  return inchCu * 16387; // Inch Cubed to Millimeter Cubed
};

convertVolume.inchCu.centimeterCu = inchCu$cmCu = function(inchCu) {
  return inchCu * 16.387; // Inch Cubed to Centimeter Cubed
};

convertVolume.inchCu.decimeterCu = inchCu$dmCu = function(inchCu) {
  return inchCu / 61.024; // Inch Cubed to Decimeter Cubed
};

convertVolume.inchCu.meterCu = inchCu$mCu = function(inchCu) {
  return inchCu / 61024; // Inch Cubed to Meter Cubed
};

convertVolume.inchCu.decameterCu = inchCu$damCu = function(inchCu) {
  return inchCu / 61024e+3; // Inch Cubed to Decameter Cubed
};

convertVolume.inchCu.hectometerCu = inchCu$hmCu = function(inchCu) {
  return inchCu / 61024e+6; // Inch Cubed to Hectometer Cubed
};

convertVolume.inchCu.kilometerCu = inchCu$kmCu = function(inchCu) {
  return inchCu / 61024e+9; // Inch Cubed to Kilometer Cubed
};

convertVolume.inchCu.inchCu = inchCu$inchCu = function(inchCu) {
  return inchCu; // Inch Cubed to Inch Cubed
};

convertVolume.inchCu.footCu = inchCu$footCu = function(inchCu) {
  return inchCu / 1728; // Inch Cubed to Foot Cubed
};

convertVolume.inchCu.yardCu = inchCu$yardCu = function(inchCu) {
  return inchCu / 4666e+1; // Inch Cubed to Yard Cubed
};

convertVolume.inchCu.mileCu = inchCu$mileCu = function(inchCu) {
  return inchCu / 2544e+11; // Inch Cubed to Mile Cubed
};

/* Foot Cubed Conversions */
convertVolume.footCu.nanometerCu = footCu$nmCu = function(footCu) {
  return footCu * 28317e+21; // Foot Cubed to Nanometer Cubed
};

convertVolume.footCu.micrometerCu = footCu$umCu = function(footCu) {
  return footCu * 28317e+12; // Foot Cubed to Micrometer Cubed
};

convertVolume.footCu.millimeterCu = footCu$mmCu = function(footCu) {
  return footCu * 28317e+3; // Foot Cubed to Millimeter Cubed
};

convertVolume.footCu.centimeterCu = footCu$cmCu = function(footCu) {
  return footCu * 28317; // Foot Cubed to Centimeter Cubed
};

convertVolume.footCu.decimeterCu = footCu$dmCu = function(footCu) {
  return footCu * 28.317; // Foot Cubed to Decimeter Cubed
};

convertVolume.footCu.meterCu = footCu$mCu = function(footCu) {
  return footCu / 35.315; // Foot Cubed to Meter Cubed
};

convertVolume.footCu.decameterCu = footCu$damCu = function(footCu) {
  return footCu / 35315; // Foot Cubed to Decameter Cubed
};

convertVolume.footCu.hectometerCu = footCu$hmCu = function(footCu) {
  return footCu / 35315e+3; // Foot Cubed to Hectometer Cubed
};

convertVolume.footCu.kilometerCu = footCu$kmCu = function(footCu) {
  return footCu / 35315e+6; // Foot Cubed to Kilometer Cubed
};

convertVolume.footCu.inchCu = footCu$inchCu = function(footCu) {
  return footCu * 1728; // Foot Cubed to Inch Cubed
};

convertVolume.footCu.footCu = footCu$footCu = function(footCu) {
  return footCu; // Foot Cubed to Foot Cubed
};

convertVolume.footCu.yardCu = footCu$yardCu = function(footCu) {
  return footCu / 27; // Foot Cubed to Yard Cubed
};

convertVolume.footCu.mileCu = footCu$mileCu = function(footCu) {
  return footCu / 1472e+8; // Foot Cubed to Mile Cubed
};

/* Yard Cubed Conversions */
convertVolume.yardCu.nanometerCu = yardCu$nmCu = function(yardCu) {
  return yardCu * 7646e+23; // Yard Cubed to Nanometer Cubed
};

convertVolume.yardCu.micrometerCu = yardCu$umCu = function(yardCu) {
  return yardCu * 7646e+14; // Yard Cubed to Micrometer Cubed
};

convertVolume.yardCu.millimeterCu = yardCu$mmCu = function(yardCu) {
  return yardCu * 7646e+5; // Yard Cubed to Millimeter Cubed
};

convertVolume.yardCu.centimeterCu = yardCu$cmCu = function(yardCu) {
  return yardCu * 7646e+2; // Yard Cubed to Centimeter Cubed
};

convertVolume.yardCu.decimeterCu = yardCu$dmCu = function(yardCu) {
  return yardCu * 764.6; // Yard Cubed to Decimeter Cubed
};

convertVolume.yardCu.meterCu = yardCu$mCu = function(yardCu) {
  return yardCu / 1.308; // Yard Cubed to Meter Cubed
};

convertVolume.yardCu.decameterCu = yardCu$damCu = function(yardCu) {
  return yardCu / 1308; // Yard Cubed to Decameter Cubed
};

convertVolume.yardCu.hectometerCu = yardCu$hmCu = function(yardCu) {
  return yardCu / 1308e+3; // Yard Cubed to Hectometer Cubed
};

convertVolume.yardCu.kilometerCu = yardCu$kmCu = function(yardCu) {
  return yardCu / 1308e+6; // Yard Cubed to Kilometer Cubed
};

convertVolume.yardCu.inchCu = yardCu$inchCu = function(yardCu) {
  return yardCu * 4666e+1; // Yard Cubed to Inch Cubed
};

convertVolume.yardCu.footCu = yardCu$footCu = function(yardCu) {
  return yardCu * 27; // Yard Cubed to Foot Cubed
};

convertVolume.yardCu.yardCu = yardCu$yardCu = function(yardCu) {
  return yardCu; // Yard Cubed to Yard Cubed
};

convertVolume.yardCu.mileCu = yardCu$mileCu = function(yardCu) {
  return yardCu / 5452e+6; // Yard Cubed to Mile Cubed
};

/* Mile Cubed Conversions */
convertVolume.mileCu.nanometerCu = mileCu$nmCu = function(mileCu) {
  return mileCu * 4.168e+33; // Mile Cubed to Nanometer Cubed
};

convertVolume.mileCu.micrometerCu = mileCu$umCu = function(mileCu) {
  return mileCu * 4.168e+24; // Mile Cubed to Micrometer Cubed
};

convertVolume.mileCu.millimeterCu = mileCu$mmCu = function(mileCu) {
  return mileCu * 4.168e+15; // Mile Cubed to Millimeter Cubed
};

convertVolume.mileCu.centimeterCu = mileCu$cmCu = function(mileCu) {
  return mileCu * 4.168e+12; // Mile Cubed to Centimeter Cubed
};

convertVolume.mileCu.decimeterCu = mileCu$dmCu = function(mileCu) {
  return mileCu * 4.168e+9; // Mile Cubed to Decimeter Cubed
};

convertVolume.mileCu.meterCu = mileCu$mCu = function(mileCu) {
  return mileCu * 4168e+6; // Mile Cubed to Meter Cubed
};

convertVolume.mileCu.decameterCu = mileCu$damCu = function(mileCu) {
  return mileCu * 4168e+3; // Mile Cubed to Decameter Cubed
};

convertVolume.mileCu.hectometerCu = mileCu$hmCu = function(mileCu) {
  return mileCu * 4168; // Mile Cubed to Hectometer Cubed
};

convertVolume.mileCu.kilometerCu = mileCu$kmCu = function(mileCu) {
  return mileCu * 4.168; // Mile Cubed to Kilometer Cubed
};

convertVolume.mileCu.inchCu = mileCu$inchCu = function(mileCu) {
  return mileCu * 2544e+11; // Mile Cubed to Inch Cubed
};

convertVolume.mileCu.footCu = mileCu$footCu = function(mileCu) {
  return mileCu * 1472e+8; // Mile Cubed to Foot Cubed
};

convertVolume.mileCu.yardCu = mileCu$yardCu = function(mileCu) {
  return mileCu * 5452e+6; // Mile Cubed to Yard Cubed
};

convertVolume.mileCu.mileCu = mileCu$mileCu = function(mileCu) {
  return mileCu; // Mile Cubed to Mile Cubed
};

convert = {
  angle: convertAngle,
  area: convertArea,
  data: convertData,
  dimension: convertDimension,
  energy: convertEnergy,
  frequency: convertFrequency,
  length: convertLength,
  mass: convertMass,
  pressure: convertPressure,
  speed: convertSpeed,
  temperature: convertTemperature,
  time: convertTime,
  volume: convertVolume
};